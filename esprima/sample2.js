var data = 
{
    "type": "Program",
    "body": [
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "FunctionExpression",
                    "id": null,
                    "params": [],
                    "body": {
                        "type": "BlockStatement",
                        "body": [
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "BinaryExpression",
                                    "operator": "===",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "opener"
                                    },
                                    "right": {
                                        "type": "Literal",
                                        "value": null,
                                        "raw": "null"
                                    }
                                },
                                "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "console"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "error"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Literal",
                                                        "value": "opener is null",
                                                        "raw": "\"opener is null\""
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "argument": null
                                        }
                                    ]
                                },
                                "alternate": null
                            },
                            {
                                "type": "VariableDeclaration",
                                "declarations": [
                                    {
                                        "type": "VariableDeclarator",
                                        "id": {
                                            "type": "Identifier",
                                            "name": "bodyString"
                                        },
                                        "init": {
                                            "type": "BinaryExpression",
                                            "operator": "+",
                                            "left": {
                                                "type": "BinaryExpression",
                                                "operator": "+",
                                                "left": {
                                                    "type": "BinaryExpression",
                                                    "operator": "+",
                                                    "left": {
                                                        "type": "BinaryExpression",
                                                        "operator": "+",
                                                        "left": {
                                                            "type": "BinaryExpression",
                                                            "operator": "+",
                                                            "left": {
                                                                "type": "BinaryExpression",
                                                                "operator": "+",
                                                                "left": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "+",
                                                                    "left": {
                                                                        "type": "BinaryExpression",
                                                                        "operator": "+",
                                                                        "left": {
                                                                            "type": "BinaryExpression",
                                                                            "operator": "+",
                                                                            "left": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "+",
                                                                                "left": {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "+",
                                                                                    "left": {
                                                                                        "type": "BinaryExpression",
                                                                                        "operator": "+",
                                                                                        "left": {
                                                                                            "type": "BinaryExpression",
                                                                                            "operator": "+",
                                                                                            "left": {
                                                                                                "type": "BinaryExpression",
                                                                                                "operator": "+",
                                                                                                "left": {
                                                                                                    "type": "BinaryExpression",
                                                                                                    "operator": "+",
                                                                                                    "left": {
                                                                                                        "type": "BinaryExpression",
                                                                                                        "operator": "+",
                                                                                                        "left": {
                                                                                                            "type": "BinaryExpression",
                                                                                                            "operator": "+",
                                                                                                            "left": {
                                                                                                                "type": "BinaryExpression",
                                                                                                                "operator": "+",
                                                                                                                "left": {
                                                                                                                    "type": "BinaryExpression",
                                                                                                                    "operator": "+",
                                                                                                                    "left": {
                                                                                                                        "type": "BinaryExpression",
                                                                                                                        "operator": "+",
                                                                                                                        "left": {
                                                                                                                            "type": "BinaryExpression",
                                                                                                                            "operator": "+",
                                                                                                                            "left": {
                                                                                                                                "type": "BinaryExpression",
                                                                                                                                "operator": "+",
                                                                                                                                "left": {
                                                                                                                                    "type": "BinaryExpression",
                                                                                                                                    "operator": "+",
                                                                                                                                    "left": {
                                                                                                                                        "type": "BinaryExpression",
                                                                                                                                        "operator": "+",
                                                                                                                                        "left": {
                                                                                                                                            "type": "BinaryExpression",
                                                                                                                                            "operator": "+",
                                                                                                                                            "left": {
                                                                                                                                                "type": "BinaryExpression",
                                                                                                                                                "operator": "+",
                                                                                                                                                "left": {
                                                                                                                                                    "type": "BinaryExpression",
                                                                                                                                                    "operator": "+",
                                                                                                                                                    "left": {
                                                                                                                                                        "type": "BinaryExpression",
                                                                                                                                                        "operator": "+",
                                                                                                                                                        "left": {
                                                                                                                                                            "type": "BinaryExpression",
                                                                                                                                                            "operator": "+",
                                                                                                                                                            "left": {
                                                                                                                                                                "type": "BinaryExpression",
                                                                                                                                                                "operator": "+",
                                                                                                                                                                "left": {
                                                                                                                                                                    "type": "BinaryExpression",
                                                                                                                                                                    "operator": "+",
                                                                                                                                                                    "left": {
                                                                                                                                                                        "type": "BinaryExpression",
                                                                                                                                                                        "operator": "+",
                                                                                                                                                                        "left": {
                                                                                                                                                                            "type": "BinaryExpression",
                                                                                                                                                                            "operator": "+",
                                                                                                                                                                            "left": {
                                                                                                                                                                                "type": "BinaryExpression",
                                                                                                                                                                                "operator": "+",
                                                                                                                                                                                "left": {
                                                                                                                                                                                    "type": "BinaryExpression",
                                                                                                                                                                                    "operator": "+",
                                                                                                                                                                                    "left": {
                                                                                                                                                                                        "type": "BinaryExpression",
                                                                                                                                                                                        "operator": "+",
                                                                                                                                                                                        "left": {
                                                                                                                                                                                            "type": "BinaryExpression",
                                                                                                                                                                                            "operator": "+",
                                                                                                                                                                                            "left": {
                                                                                                                                                                                                "type": "BinaryExpression",
                                                                                                                                                                                                "operator": "+",
                                                                                                                                                                                                "left": {
                                                                                                                                                                                                    "type": "BinaryExpression",
                                                                                                                                                                                                    "operator": "+",
                                                                                                                                                                                                    "left": {
                                                                                                                                                                                                        "type": "BinaryExpression",
                                                                                                                                                                                                        "operator": "+",
                                                                                                                                                                                                        "left": {
                                                                                                                                                                                                            "type": "BinaryExpression",
                                                                                                                                                                                                            "operator": "+",
                                                                                                                                                                                                            "left": {
                                                                                                                                                                                                                "type": "BinaryExpression",
                                                                                                                                                                                                                "operator": "+",
                                                                                                                                                                                                                "left": {
                                                                                                                                                                                                                    "type": "BinaryExpression",
                                                                                                                                                                                                                    "operator": "+",
                                                                                                                                                                                                                    "left": {
                                                                                                                                                                                                                        "type": "BinaryExpression",
                                                                                                                                                                                                                        "operator": "+",
                                                                                                                                                                                                                        "left": {
                                                                                                                                                                                                                            "type": "BinaryExpression",
                                                                                                                                                                                                                            "operator": "+",
                                                                                                                                                                                                                            "left": {
                                                                                                                                                                                                                                "type": "Literal",
                                                                                                                                                                                                                                "value": "",
                                                                                                                                                                                                                                "raw": "''"
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            "right": {
                                                                                                                                                                                                                                "type": "Literal",
                                                                                                                                                                                                                                "value": "<div class=\"filterHeader\">",
                                                                                                                                                                                                                                "raw": "'<div class=\"filterHeader\">'"
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        },
                                                                                                                                                                                                                        "right": {
                                                                                                                                                                                                                            "type": "Literal",
                                                                                                                                                                                                                            "value": "    <button id=\"__monitoringStopButton__\">STOP</button>",
                                                                                                                                                                                                                            "raw": "'    <button id=\"__monitoringStopButton__\">STOP</button>'"
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    },
                                                                                                                                                                                                                    "right": {
                                                                                                                                                                                                                        "type": "Literal",
                                                                                                                                                                                                                        "value": "    <button id=\"__monitoringStartButton__\">START</button>",
                                                                                                                                                                                                                        "raw": "'    <button id=\"__monitoringStartButton__\">START</button>'"
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                },
                                                                                                                                                                                                                "right": {
                                                                                                                                                                                                                    "type": "Literal",
                                                                                                                                                                                                                    "value": "    | interval : <select id=\"__intervalTime__\">",
                                                                                                                                                                                                                    "raw": "'    | interval : <select id=\"__intervalTime__\">'"
                                                                                                                                                                                                                }
                                                                                                                                                                                                            },
                                                                                                                                                                                                            "right": {
                                                                                                                                                                                                                "type": "Literal",
                                                                                                                                                                                                                "value": "      <option value=\"100\">100</option>",
                                                                                                                                                                                                                "raw": "'      <option value=\"100\">100</option>'"
                                                                                                                                                                                                            }
                                                                                                                                                                                                        },
                                                                                                                                                                                                        "right": {
                                                                                                                                                                                                            "type": "Literal",
                                                                                                                                                                                                            "value": "      <option value=\"500\">500</option>",
                                                                                                                                                                                                            "raw": "'      <option value=\"500\">500</option>'"
                                                                                                                                                                                                        }
                                                                                                                                                                                                    },
                                                                                                                                                                                                    "right": {
                                                                                                                                                                                                        "type": "Literal",
                                                                                                                                                                                                        "value": "      <option value=\"1000\" selected>1000</option>",
                                                                                                                                                                                                        "raw": "'      <option value=\"1000\" selected>1000</option>'"
                                                                                                                                                                                                    }
                                                                                                                                                                                                },
                                                                                                                                                                                                "right": {
                                                                                                                                                                                                    "type": "Literal",
                                                                                                                                                                                                    "value": "      <option value=\"2000\">2000</option>",
                                                                                                                                                                                                    "raw": "'      <option value=\"2000\">2000</option>'"
                                                                                                                                                                                                }
                                                                                                                                                                                            },
                                                                                                                                                                                            "right": {
                                                                                                                                                                                                "type": "Literal",
                                                                                                                                                                                                "value": "      <option value=\"5000\">5000</option>",
                                                                                                                                                                                                "raw": "'      <option value=\"5000\">5000</option>'"
                                                                                                                                                                                            }
                                                                                                                                                                                        },
                                                                                                                                                                                        "right": {
                                                                                                                                                                                            "type": "Literal",
                                                                                                                                                                                            "value": "    </select> ms",
                                                                                                                                                                                            "raw": "'    </select> ms'"
                                                                                                                                                                                        }
                                                                                                                                                                                    },
                                                                                                                                                                                    "right": {
                                                                                                                                                                                        "type": "Literal",
                                                                                                                                                                                        "value": "    | intervalSeq : <span id=\"__monitoringintervalSeqValid__\"></span> / <span id=\"__monitoringintervalSeq__\"></span>",
                                                                                                                                                                                        "raw": "'    | intervalSeq : <span id=\"__monitoringintervalSeqValid__\"></span> / <span id=\"__monitoringintervalSeq__\"></span>'"
                                                                                                                                                                                    }
                                                                                                                                                                                },
                                                                                                                                                                                "right": {
                                                                                                                                                                                    "type": "Literal",
                                                                                                                                                                                    "value": "    | cell width : <select id=\"__cellWidth100__\">",
                                                                                                                                                                                    "raw": "'    | cell width : <select id=\"__cellWidth100__\">'"
                                                                                                                                                                                }
                                                                                                                                                                            },
                                                                                                                                                                            "right": {
                                                                                                                                                                                "type": "Literal",
                                                                                                                                                                                "value": "      <option value=\"m20\">20</option>",
                                                                                                                                                                                "raw": "'      <option value=\"m20\">20</option>'"
                                                                                                                                                                            }
                                                                                                                                                                        },
                                                                                                                                                                        "right": {
                                                                                                                                                                            "type": "Literal",
                                                                                                                                                                            "value": "      <option value=\"m50\">50</option>",
                                                                                                                                                                            "raw": "'      <option value=\"m50\">50</option>'"
                                                                                                                                                                        }
                                                                                                                                                                    },
                                                                                                                                                                    "right": {
                                                                                                                                                                        "type": "Literal",
                                                                                                                                                                        "value": "      <option value=\"m100\" selected>100</option>",
                                                                                                                                                                        "raw": "'      <option value=\"m100\" selected>100</option>'"
                                                                                                                                                                    }
                                                                                                                                                                },
                                                                                                                                                                "right": {
                                                                                                                                                                    "type": "Literal",
                                                                                                                                                                    "value": "      <option value=\"m200\">200</option>",
                                                                                                                                                                    "raw": "'      <option value=\"m200\">200</option>'"
                                                                                                                                                                }
                                                                                                                                                            },
                                                                                                                                                            "right": {
                                                                                                                                                                "type": "Literal",
                                                                                                                                                                "value": "      <option value=\"m300\">300</option>",
                                                                                                                                                                "raw": "'      <option value=\"m300\">300</option>'"
                                                                                                                                                            }
                                                                                                                                                        },
                                                                                                                                                        "right": {
                                                                                                                                                            "type": "Literal",
                                                                                                                                                            "value": "      <option value=\"m400\">400</option>",
                                                                                                                                                            "raw": "'      <option value=\"m400\">400</option>'"
                                                                                                                                                        }
                                                                                                                                                    },
                                                                                                                                                    "right": {
                                                                                                                                                        "type": "Literal",
                                                                                                                                                        "value": "      <option value=\"m500\">500</option>",
                                                                                                                                                        "raw": "'      <option value=\"m500\">500</option>'"
                                                                                                                                                    }
                                                                                                                                                },
                                                                                                                                                "right": {
                                                                                                                                                    "type": "Literal",
                                                                                                                                                    "value": "    </select>",
                                                                                                                                                    "raw": "'    </select>'"
                                                                                                                                                }
                                                                                                                                            },
                                                                                                                                            "right": {
                                                                                                                                                "type": "Literal",
                                                                                                                                                "value": "    | <input type=\"checkbox\" id=\"__wordWrapCheckbox__\" /><label for=\"__wordWrapCheckbox__\">word-wrap & beauty</label>",
                                                                                                                                                "raw": "'    | <input type=\"checkbox\" id=\"__wordWrapCheckbox__\" /><label for=\"__wordWrapCheckbox__\">word-wrap & beauty</label>'"
                                                                                                                                            }
                                                                                                                                        },
                                                                                                                                        "right": {
                                                                                                                                            "type": "Literal",
                                                                                                                                            "value": "    | <input type=\"checkbox\" id=\"__scrollCheckbox__\" checked=\"checked\" /><label for=\"__scrollCheckbox__\">autoScroll</label>",
                                                                                                                                            "raw": "'    | <input type=\"checkbox\" id=\"__scrollCheckbox__\" checked=\"checked\" /><label for=\"__scrollCheckbox__\">autoScroll</label>'"
                                                                                                                                        }
                                                                                                                                    },
                                                                                                                                    "right": {
                                                                                                                                        "type": "Literal",
                                                                                                                                        "value": "    | exceptList : <span id=\"exceptListSpan\"></span>",
                                                                                                                                        "raw": "'    | exceptList : <span id=\"exceptListSpan\"></span>'"
                                                                                                                                    }
                                                                                                                                },
                                                                                                                                "right": {
                                                                                                                                    "type": "Literal",
                                                                                                                                    "value": "</div>",
                                                                                                                                    "raw": "'</div>'"
                                                                                                                                }
                                                                                                                            },
                                                                                                                            "right": {
                                                                                                                                "type": "Literal",
                                                                                                                                "value": "<div class=\"m0\" id=\"__monitoringResult__\" style=\"margin-top:30px;\">",
                                                                                                                                "raw": "'<div class=\"m0\" id=\"__monitoringResult__\" style=\"margin-top:30px;\">'"
                                                                                                                            }
                                                                                                                        },
                                                                                                                        "right": {
                                                                                                                            "type": "Literal",
                                                                                                                            "value": "    <div class=\"m1 desc\" id=\"__monitoringInterval__\">",
                                                                                                                            "raw": "'    <div class=\"m1 desc\" id=\"__monitoringInterval__\">'"
                                                                                                                        }
                                                                                                                    },
                                                                                                                    "right": {
                                                                                                                        "type": "Literal",
                                                                                                                        "value": "        <div class=\"m2_head desc\">intervalSeq</div>",
                                                                                                                        "raw": "'        <div class=\"m2_head desc\">intervalSeq</div>'"
                                                                                                                    }
                                                                                                                },
                                                                                                                "right": {
                                                                                                                    "type": "Literal",
                                                                                                                    "value": "        <div class=\"m2_right desc\" id=\"__right__monitoringInterval__\">intervalSeq</div>",
                                                                                                                    "raw": "'        <div class=\"m2_right desc\" id=\"__right__monitoringInterval__\">intervalSeq</div>'"
                                                                                                                }
                                                                                                            },
                                                                                                            "right": {
                                                                                                                "type": "Literal",
                                                                                                                "value": "    </div>",
                                                                                                                "raw": "'    </div>'"
                                                                                                            }
                                                                                                        },
                                                                                                        "right": {
                                                                                                            "type": "Literal",
                                                                                                            "value": "    <div class=\"m1\" id=\"__monitoringTime__\">",
                                                                                                            "raw": "'    <div class=\"m1\" id=\"__monitoringTime__\">'"
                                                                                                        }
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "Literal",
                                                                                                        "value": "        <div class=\"m2_head desc\">HH:MM:SS</div>",
                                                                                                        "raw": "'        <div class=\"m2_head desc\">HH:MM:SS</div>'"
                                                                                                    }
                                                                                                },
                                                                                                "right": {
                                                                                                    "type": "Literal",
                                                                                                    "value": "        <div class=\"m2_right\" id=\"__right__monitoringTime__\">HH:MM:SS, SSS, spendTime(ms)</div>",
                                                                                                    "raw": "'        <div class=\"m2_right\" id=\"__right__monitoringTime__\">HH:MM:SS, SSS, spendTime(ms)</div>'"
                                                                                                }
                                                                                            },
                                                                                            "right": {
                                                                                                "type": "Literal",
                                                                                                "value": "    </div>",
                                                                                                "raw": "'    </div>'"
                                                                                            }
                                                                                        },
                                                                                        "right": {
                                                                                            "type": "Literal",
                                                                                            "value": "    <div class=\"m1 desc\" id=\"__monitoringReloadCount__\">",
                                                                                            "raw": "'    <div class=\"m1 desc\" id=\"__monitoringReloadCount__\">'"
                                                                                        }
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "Literal",
                                                                                        "value": "        <div class=\"m2_head desc\">monitoringReloadCount</div>",
                                                                                        "raw": "'        <div class=\"m2_head desc\">monitoringReloadCount</div>'"
                                                                                    }
                                                                                },
                                                                                "right": {
                                                                                    "type": "Literal",
                                                                                    "value": "        <div class=\"m2_right desc\" id=\"__right__monitoringReloadCount__\">monitoringReloadCount</div>",
                                                                                    "raw": "'        <div class=\"m2_right desc\" id=\"__right__monitoringReloadCount__\">monitoringReloadCount</div>'"
                                                                                }
                                                                            },
                                                                            "right": {
                                                                                "type": "Literal",
                                                                                "value": "    </div>",
                                                                                "raw": "'    </div>'"
                                                                            }
                                                                        },
                                                                        "right": {
                                                                            "type": "Literal",
                                                                            "value": "<br/>",
                                                                            "raw": "'<br/>'"
                                                                        }
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": "</div>",
                                                                        "raw": "'</div>'"
                                                                    }
                                                                },
                                                                "right": {
                                                                    "type": "Literal",
                                                                    "value": "<div style=\"clear:both;\"></div>",
                                                                    "raw": "'<div style=\"clear:both;\"></div>'"
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "Literal",
                                                                "value": "<br/>",
                                                                "raw": "'<br/>'"
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "Literal",
                                                            "value": "<div id=\"__monitoringTextarea__\" style=\"position:relative;\">",
                                                            "raw": "'<div id=\"__monitoringTextarea__\" style=\"position:relative;\">'"
                                                        }
                                                    },
                                                    "right": {
                                                        "type": "Literal",
                                                        "value": "    <textarea id=\"__monitoringTextarea1__\" cols=\"130\" rows=\"55\">Exception Log :</textarea>",
                                                        "raw": "'    <textarea id=\"__monitoringTextarea1__\" cols=\"130\" rows=\"55\">Exception Log :</textarea>'"
                                                    }
                                                },
                                                "right": {
                                                    "type": "Literal",
                                                    "value": "    <textarea id=\"__monitoringTextarea2__\" cols=\"130\" rows=\"55\">Clicked Content :</textarea>",
                                                    "raw": "'    <textarea id=\"__monitoringTextarea2__\" cols=\"130\" rows=\"55\">Clicked Content :</textarea>'"
                                                }
                                            },
                                            "right": {
                                                "type": "Literal",
                                                "value": "</div>",
                                                "raw": "'</div>'"
                                            }
                                        }
                                    }
                                ],
                                "kind": "var"
                            },
                            {
                                "type": "VariableDeclaration",
                                "declarations": [
                                    {
                                        "type": "VariableDeclarator",
                                        "id": {
                                            "type": "Identifier",
                                            "name": "pDiv"
                                        },
                                        "init": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                    "type": "Identifier",
                                                    "name": "document"
                                                },
                                                "property": {
                                                    "type": "Identifier",
                                                    "name": "createElement"
                                                }
                                            },
                                            "arguments": [
                                                {
                                                    "type": "Literal",
                                                    "value": "div",
                                                    "raw": "'div'"
                                                }
                                            ]
                                        }
                                    }
                                ],
                                "kind": "var"
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "pDiv"
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "innerHTML"
                                        }
                                    },
                                    "right": {
                                        "type": "Identifier",
                                        "name": "bodyString"
                                    }
                                }
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "pDiv"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "style"
                                            }
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "postion"
                                        }
                                    },
                                    "right": {
                                        "type": "Literal",
                                        "value": "relative",
                                        "raw": "\"relative\""
                                    }
                                }
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "MemberExpression",
                                            "computed": true,
                                            "object": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "document"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "getElementsByTagName"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Literal",
                                                        "value": "body",
                                                        "raw": "\"body\""
                                                    }
                                                ]
                                            },
                                            "property": {
                                                "type": "Literal",
                                                "value": 0,
                                                "raw": "0"
                                            }
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "appendChild"
                                        }
                                    },
                                    "arguments": [
                                        {
                                            "type": "Identifier",
                                            "name": "pDiv"
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "FunctionDeclaration",
                                "id": {
                                    "type": "Identifier",
                                    "name": "c"
                                },
                                "params": [],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                                {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                        "type": "Identifier",
                                                        "name": "str"
                                                    },
                                                    "init": {
                                                        "type": "Literal",
                                                        "value": "",
                                                        "raw": "\"\""
                                                    }
                                                }
                                            ],
                                            "kind": "var"
                                        },
                                        {
                                            "type": "ForStatement",
                                            "init": {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "index"
                                                        },
                                                        "init": {
                                                            "type": "Literal",
                                                            "value": 0,
                                                            "raw": "0"
                                                        }
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            "test": {
                                                "type": "BinaryExpression",
                                                "operator": "<",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "index"
                                                },
                                                "right": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "arguments"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "length"
                                                    }
                                                }
                                            },
                                            "update": {
                                                "type": "UpdateExpression",
                                                "operator": "++",
                                                "argument": {
                                                    "type": "Identifier",
                                                    "name": "index"
                                                },
                                                "prefix": false
                                            },
                                            "body": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "IfStatement",
                                                        "test": {
                                                            "type": "BinaryExpression",
                                                            "operator": "!=",
                                                            "left": {
                                                                "type": "Identifier",
                                                                "name": "index"
                                                            },
                                                            "right": {
                                                                "type": "Literal",
                                                                "value": 0,
                                                                "raw": "0"
                                                            }
                                                        },
                                                        "consequent": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "+=",
                                                                        "left": {
                                                                            "type": "Identifier",
                                                                            "name": "str"
                                                                        },
                                                                        "right": {
                                                                            "type": "Literal",
                                                                            "value": ",",
                                                                            "raw": "\",\""
                                                                        }
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "alternate": null
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "+=",
                                                            "left": {
                                                                "type": "Identifier",
                                                                "name": "str"
                                                            },
                                                            "right": {
                                                                "type": "MemberExpression",
                                                                "computed": true,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "arguments"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "index"
                                                                }
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                                {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                        "type": "Identifier",
                                                        "name": "ta"
                                                    },
                                                    "init": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "document"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "getElementById"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Literal",
                                                                "value": "__monitoringTextarea1__",
                                                                "raw": "\"__monitoringTextarea1__\""
                                                            }
                                                        ]
                                                    }
                                                }
                                            ],
                                            "kind": "var"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "ta"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "value"
                                                    }
                                                },
                                                "right": {
                                                    "type": "BinaryExpression",
                                                    "operator": "+",
                                                    "left": {
                                                        "type": "BinaryExpression",
                                                        "operator": "+",
                                                        "left": {
                                                            "type": "BinaryExpression",
                                                            "operator": "+",
                                                            "left": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "ta"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "value"
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "Literal",
                                                                "value": "\n[[[ intervalSeq=",
                                                                "raw": "\"\\n[[[ intervalSeq=\""
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "Identifier",
                                                            "name": "intervalSeq"
                                                        }
                                                    },
                                                    "right": {
                                                        "type": "Literal",
                                                        "value": " ]]]",
                                                        "raw": "\" ]]]\""
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "ta"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "value"
                                                    }
                                                },
                                                "right": {
                                                    "type": "BinaryExpression",
                                                    "operator": "+",
                                                    "left": {
                                                        "type": "BinaryExpression",
                                                        "operator": "+",
                                                        "left": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "ta"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "value"
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "Literal",
                                                            "value": "\n",
                                                            "raw": "\"\\n\""
                                                        }
                                                    },
                                                    "right": {
                                                        "type": "Identifier",
                                                        "name": "str"
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            {
                                "type": "FunctionDeclaration",
                                "id": {
                                    "type": "Identifier",
                                    "name": "c2"
                                },
                                "params": [],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                                {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                        "type": "Identifier",
                                                        "name": "str"
                                                    },
                                                    "init": {
                                                        "type": "Literal",
                                                        "value": "",
                                                        "raw": "\"\""
                                                    }
                                                }
                                            ],
                                            "kind": "var"
                                        },
                                        {
                                            "type": "ForStatement",
                                            "init": {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "index"
                                                        },
                                                        "init": {
                                                            "type": "Literal",
                                                            "value": 0,
                                                            "raw": "0"
                                                        }
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            "test": {
                                                "type": "BinaryExpression",
                                                "operator": "<",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "index"
                                                },
                                                "right": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "arguments"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "length"
                                                    }
                                                }
                                            },
                                            "update": {
                                                "type": "UpdateExpression",
                                                "operator": "++",
                                                "argument": {
                                                    "type": "Identifier",
                                                    "name": "index"
                                                },
                                                "prefix": false
                                            },
                                            "body": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "IfStatement",
                                                        "test": {
                                                            "type": "BinaryExpression",
                                                            "operator": "!=",
                                                            "left": {
                                                                "type": "Identifier",
                                                                "name": "index"
                                                            },
                                                            "right": {
                                                                "type": "Literal",
                                                                "value": 0,
                                                                "raw": "0"
                                                            }
                                                        },
                                                        "consequent": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "+=",
                                                                        "left": {
                                                                            "type": "Identifier",
                                                                            "name": "str"
                                                                        },
                                                                        "right": {
                                                                            "type": "Literal",
                                                                            "value": ",",
                                                                            "raw": "\",\""
                                                                        }
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "alternate": null
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "+=",
                                                            "left": {
                                                                "type": "Identifier",
                                                                "name": "str"
                                                            },
                                                            "right": {
                                                                "type": "MemberExpression",
                                                                "computed": true,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "arguments"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "index"
                                                                }
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                                {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                        "type": "Identifier",
                                                        "name": "ta"
                                                    },
                                                    "init": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "document"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "getElementById"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Literal",
                                                                "value": "__monitoringTextarea2__",
                                                                "raw": "\"__monitoringTextarea2__\""
                                                            }
                                                        ]
                                                    }
                                                }
                                            ],
                                            "kind": "var"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "ta"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "value"
                                                    }
                                                },
                                                "right": {
                                                    "type": "BinaryExpression",
                                                    "operator": "+",
                                                    "left": {
                                                        "type": "BinaryExpression",
                                                        "operator": "+",
                                                        "left": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "ta"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "value"
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "Literal",
                                                            "value": "\n",
                                                            "raw": "\"\\n\""
                                                        }
                                                    },
                                                    "right": {
                                                        "type": "Identifier",
                                                        "name": "str"
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            {
                                "type": "FunctionDeclaration",
                                "id": {
                                    "type": "Identifier",
                                    "name": "createElement2"
                                },
                                "params": [
                                    {
                                        "type": "Identifier",
                                        "name": "elString"
                                    },
                                    {
                                        "type": "Identifier",
                                        "name": "key"
                                    },
                                    {
                                        "type": "Identifier",
                                        "name": "clazz"
                                    },
                                    {
                                        "type": "Identifier",
                                        "name": "html"
                                    },
                                    {
                                        "type": "Identifier",
                                        "name": "parent"
                                    },
                                    {
                                        "type": "Identifier",
                                        "name": "callBackFn"
                                    },
                                    {
                                        "type": "Identifier",
                                        "name": "isAppendChild"
                                    }
                                ],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                                {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                        "type": "Identifier",
                                                        "name": "iDiv"
                                                    },
                                                    "init": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "document"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "createElement"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Identifier",
                                                                "name": "elString"
                                                            }
                                                        ]
                                                    }
                                                }
                                            ],
                                            "kind": "var"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "iDiv"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "setAttribute"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Literal",
                                                        "value": "idx",
                                                        "raw": "\"idx\""
                                                    },
                                                    {
                                                        "type": "UpdateExpression",
                                                        "operator": "++",
                                                        "argument": {
                                                            "type": "Identifier",
                                                            "name": "elementInx"
                                                        },
                                                        "prefix": true
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "type": "IfStatement",
                                            "test": {
                                                "type": "BinaryExpression",
                                                "operator": "!==",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "key"
                                                },
                                                "right": {
                                                    "type": "Literal",
                                                    "value": null,
                                                    "raw": "null"
                                                }
                                            },
                                            "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "iDiv"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "id"
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "Identifier",
                                                                "name": "key"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            "alternate": null
                                        },
                                        {
                                            "type": "IfStatement",
                                            "test": {
                                                "type": "BinaryExpression",
                                                "operator": "!==",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "clazz"
                                                },
                                                "right": {
                                                    "type": "Literal",
                                                    "value": null,
                                                    "raw": "null"
                                                }
                                            },
                                            "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "iDiv"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "className"
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "Identifier",
                                                                "name": "clazz"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            "alternate": null
                                        },
                                        {
                                            "type": "IfStatement",
                                            "test": {
                                                "type": "BinaryExpression",
                                                "operator": "!==",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "html"
                                                },
                                                "right": {
                                                    "type": "Literal",
                                                    "value": null,
                                                    "raw": "null"
                                                }
                                            },
                                            "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "iDiv"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "innerHTML"
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "Identifier",
                                                                "name": "html"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            "alternate": null
                                        },
                                        {
                                            "type": "IfStatement",
                                            "test": {
                                                "type": "Identifier",
                                                "name": "callBackFn"
                                            },
                                            "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "iDiv"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "addEventListener"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Literal",
                                                                    "value": "click",
                                                                    "raw": "\"click\""
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "callBackFn"
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "iDiv"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "oncontextmenu"
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "FunctionExpression",
                                                                "id": null,
                                                                "params": [
                                                                    {
                                                                        "type": "Identifier",
                                                                        "name": "event"
                                                                    }
                                                                ],
                                                                "body": {
                                                                    "type": "BlockStatement",
                                                                    "body": [
                                                                        {
                                                                            "type": "VariableDeclaration",
                                                                            "declarations": [
                                                                                {
                                                                                    "type": "VariableDeclarator",
                                                                                    "id": {
                                                                                        "type": "Identifier",
                                                                                        "name": "tickerNum"
                                                                                    },
                                                                                    "init": {
                                                                                        "type": "CallExpression",
                                                                                        "callee": {
                                                                                            "type": "Identifier",
                                                                                            "name": "toggleTickerCount"
                                                                                        },
                                                                                        "arguments": []
                                                                                    }
                                                                                }
                                                                            ],
                                                                            "kind": "var"
                                                                        },
                                                                        {
                                                                            "type": "VariableDeclaration",
                                                                            "declarations": [
                                                                                {
                                                                                    "type": "VariableDeclarator",
                                                                                    "id": {
                                                                                        "type": "Identifier",
                                                                                        "name": "ticker"
                                                                                    },
                                                                                    "init": {
                                                                                        "type": "CallExpression",
                                                                                        "callee": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": false,
                                                                                            "object": {
                                                                                                "type": "Identifier",
                                                                                                "name": "document"
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Identifier",
                                                                                                "name": "createElement"
                                                                                            }
                                                                                        },
                                                                                        "arguments": [
                                                                                            {
                                                                                                "type": "Literal",
                                                                                                "value": "div",
                                                                                                "raw": "\"div\""
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                }
                                                                            ],
                                                                            "kind": "var"
                                                                        },
                                                                        {
                                                                            "type": "ExpressionStatement",
                                                                            "expression": {
                                                                                "type": "AssignmentExpression",
                                                                                "operator": "=",
                                                                                "left": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "ticker"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "className"
                                                                                    }
                                                                                },
                                                                                "right": {
                                                                                    "type": "Literal",
                                                                                    "value": "ticker",
                                                                                    "raw": "\"ticker\""
                                                                                }
                                                                            }
                                                                        },
                                                                        {
                                                                            "type": "ExpressionStatement",
                                                                            "expression": {
                                                                                "type": "AssignmentExpression",
                                                                                "operator": "=",
                                                                                "left": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "ticker"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "style"
                                                                                        }
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "top"
                                                                                    }
                                                                                },
                                                                                "right": {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "+",
                                                                                    "left": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "iDiv"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "offsetTop"
                                                                                        }
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "Literal",
                                                                                        "value": "px",
                                                                                        "raw": "\"px\""
                                                                                    }
                                                                                }
                                                                            }
                                                                        },
                                                                        {
                                                                            "type": "ExpressionStatement",
                                                                            "expression": {
                                                                                "type": "AssignmentExpression",
                                                                                "operator": "=",
                                                                                "left": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "ticker"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "style"
                                                                                        }
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "left"
                                                                                    }
                                                                                },
                                                                                "right": {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "+",
                                                                                    "left": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "iDiv"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "offsetLeft"
                                                                                        }
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "Literal",
                                                                                        "value": "px",
                                                                                        "raw": "\"px\""
                                                                                    }
                                                                                }
                                                                            }
                                                                        },
                                                                        {
                                                                            "type": "ExpressionStatement",
                                                                            "expression": {
                                                                                "type": "AssignmentExpression",
                                                                                "operator": "=",
                                                                                "left": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "ticker"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "innerHTML"
                                                                                    }
                                                                                },
                                                                                "right": {
                                                                                    "type": "Identifier",
                                                                                    "name": "tickerNum"
                                                                                }
                                                                            }
                                                                        },
                                                                        {
                                                                            "type": "ExpressionStatement",
                                                                            "expression": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "ticker"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "setAttribute"
                                                                                    }
                                                                                },
                                                                                "arguments": [
                                                                                    {
                                                                                        "type": "Literal",
                                                                                        "value": "num",
                                                                                        "raw": "\"num\""
                                                                                    },
                                                                                    {
                                                                                        "type": "Identifier",
                                                                                        "name": "tickerNum"
                                                                                    }
                                                                                ]
                                                                            }
                                                                        },
                                                                        {
                                                                            "type": "ExpressionStatement",
                                                                            "expression": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "CallExpression",
                                                                                        "callee": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": false,
                                                                                            "object": {
                                                                                                "type": "Identifier",
                                                                                                "name": "document"
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Identifier",
                                                                                                "name": "getElementById"
                                                                                            }
                                                                                        },
                                                                                        "arguments": [
                                                                                            {
                                                                                                "type": "Literal",
                                                                                                "value": "__monitoringResult__",
                                                                                                "raw": "\"__monitoringResult__\""
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "appendChild"
                                                                                    }
                                                                                },
                                                                                "arguments": [
                                                                                    {
                                                                                        "type": "Identifier",
                                                                                        "name": "ticker"
                                                                                    }
                                                                                ]
                                                                            }
                                                                        },
                                                                        {
                                                                            "type": "ExpressionStatement",
                                                                            "expression": {
                                                                                "type": "AssignmentExpression",
                                                                                "operator": "=",
                                                                                "left": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": true,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "tickerArr"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "tickerNum"
                                                                                    }
                                                                                },
                                                                                "right": {
                                                                                    "type": "CallExpression",
                                                                                    "callee": {
                                                                                        "type": "Identifier",
                                                                                        "name": "Number"
                                                                                    },
                                                                                    "arguments": [
                                                                                        {
                                                                                            "type": "CallExpression",
                                                                                            "callee": {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": false,
                                                                                                "object": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "iDiv"
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "getAttribute"
                                                                                                }
                                                                                            },
                                                                                            "arguments": [
                                                                                                {
                                                                                                    "type": "Literal",
                                                                                                    "value": "idx",
                                                                                                    "raw": "\"idx\""
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            }
                                                                        },
                                                                        {
                                                                            "type": "IfStatement",
                                                                            "test": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "===",
                                                                                "left": {
                                                                                    "type": "Identifier",
                                                                                    "name": "tickerNum"
                                                                                },
                                                                                "right": {
                                                                                    "type": "Literal",
                                                                                    "value": 1,
                                                                                    "raw": "1"
                                                                                }
                                                                            },
                                                                            "consequent": {
                                                                                "type": "BlockStatement",
                                                                                "body": [
                                                                                    {
                                                                                        "type": "ExpressionStatement",
                                                                                        "expression": {
                                                                                            "type": "CallExpression",
                                                                                            "callee": {
                                                                                                "type": "Identifier",
                                                                                                "name": "diffFn"
                                                                                            },
                                                                                            "arguments": []
                                                                                        }
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "alternate": null
                                                                        },
                                                                        {
                                                                            "type": "ExpressionStatement",
                                                                            "expression": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "event"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "preventDefault"
                                                                                    }
                                                                                },
                                                                                "arguments": []
                                                                            }
                                                                        }
                                                                    ]
                                                                },
                                                                "generator": false,
                                                                "expression": false,
                                                                "async": false
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            "alternate": null
                                        },
                                        {
                                            "type": "IfStatement",
                                            "test": {
                                                "type": "LogicalExpression",
                                                "operator": "||",
                                                "left": {
                                                    "type": "BinaryExpression",
                                                    "operator": "===",
                                                    "left": {
                                                        "type": "UnaryExpression",
                                                        "operator": "typeof",
                                                        "argument": {
                                                            "type": "Identifier",
                                                            "name": "isAppendChild"
                                                        },
                                                        "prefix": true
                                                    },
                                                    "right": {
                                                        "type": "Literal",
                                                        "value": "undefined",
                                                        "raw": "\"undefined\""
                                                    }
                                                },
                                                "right": {
                                                    "type": "BinaryExpression",
                                                    "operator": "===",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "isAppendChild"
                                                    },
                                                    "right": {
                                                        "type": "Literal",
                                                        "value": true,
                                                        "raw": "true"
                                                    }
                                                }
                                            },
                                            "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "document"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "getElementById"
                                                                        }
                                                                    },
                                                                    "arguments": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "parent"
                                                                        }
                                                                    ]
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "appendChild"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "iDiv"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            },
                                            "alternate": null
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "argument": {
                                                "type": "Identifier",
                                                "name": "iDiv"
                                            }
                                        }
                                    ]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            {
                                "type": "VariableDeclaration",
                                "declarations": [
                                    {
                                        "type": "VariableDeclarator",
                                        "id": {
                                            "type": "Identifier",
                                            "name": "toggleTickerCount"
                                        },
                                        "init": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "FunctionExpression",
                                                "id": null,
                                                "params": [],
                                                "body": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                        {
                                                            "type": "VariableDeclaration",
                                                            "declarations": [
                                                                {
                                                                    "type": "VariableDeclarator",
                                                                    "id": {
                                                                        "type": "Identifier",
                                                                        "name": "tickerCount"
                                                                    },
                                                                    "init": {
                                                                        "type": "Literal",
                                                                        "value": 1,
                                                                        "raw": "1"
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "var"
                                                        },
                                                        {
                                                            "type": "FunctionDeclaration",
                                                            "id": {
                                                                "type": "Identifier",
                                                                "name": "toggleFn"
                                                            },
                                                            "params": [],
                                                            "body": {
                                                                "type": "BlockStatement",
                                                                "body": [
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "AssignmentExpression",
                                                                            "operator": "=",
                                                                            "left": {
                                                                                "type": "Identifier",
                                                                                "name": "tickerCount"
                                                                            },
                                                                            "right": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "-",
                                                                                "left": {
                                                                                    "type": "Literal",
                                                                                    "value": 1,
                                                                                    "raw": "1"
                                                                                },
                                                                                "right": {
                                                                                    "type": "Identifier",
                                                                                    "name": "tickerCount"
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    {
                                                                        "type": "IfStatement",
                                                                        "test": {
                                                                            "type": "BinaryExpression",
                                                                            "operator": "===",
                                                                            "left": {
                                                                                "type": "Identifier",
                                                                                "name": "tickerCount"
                                                                            },
                                                                            "right": {
                                                                                "type": "Literal",
                                                                                "value": 0,
                                                                                "raw": "0"
                                                                            }
                                                                        },
                                                                        "consequent": {
                                                                            "type": "BlockStatement",
                                                                            "body": [
                                                                                {
                                                                                    "type": "VariableDeclaration",
                                                                                    "declarations": [
                                                                                        {
                                                                                            "type": "VariableDeclarator",
                                                                                            "id": {
                                                                                                "type": "Identifier",
                                                                                                "name": "arr"
                                                                                            },
                                                                                            "init": {
                                                                                                "type": "CallExpression",
                                                                                                "callee": {
                                                                                                    "type": "MemberExpression",
                                                                                                    "computed": false,
                                                                                                    "object": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "document"
                                                                                                    },
                                                                                                    "property": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "getElementsByClassName"
                                                                                                    }
                                                                                                },
                                                                                                "arguments": [
                                                                                                    {
                                                                                                        "type": "Literal",
                                                                                                        "value": "ticker",
                                                                                                        "raw": "\"ticker\""
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        }
                                                                                    ],
                                                                                    "kind": "var"
                                                                                },
                                                                                {
                                                                                    "type": "VariableDeclaration",
                                                                                    "declarations": [
                                                                                        {
                                                                                            "type": "VariableDeclarator",
                                                                                            "id": {
                                                                                                "type": "Identifier",
                                                                                                "name": "len"
                                                                                            },
                                                                                            "init": {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": false,
                                                                                                "object": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "arr"
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "length"
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    ],
                                                                                    "kind": "var"
                                                                                },
                                                                                {
                                                                                    "type": "ForStatement",
                                                                                    "init": {
                                                                                        "type": "VariableDeclaration",
                                                                                        "declarations": [
                                                                                            {
                                                                                                "type": "VariableDeclarator",
                                                                                                "id": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "i"
                                                                                                },
                                                                                                "init": {
                                                                                                    "type": "Literal",
                                                                                                    "value": 0,
                                                                                                    "raw": "0"
                                                                                                }
                                                                                            }
                                                                                        ],
                                                                                        "kind": "var"
                                                                                    },
                                                                                    "test": {
                                                                                        "type": "BinaryExpression",
                                                                                        "operator": "<",
                                                                                        "left": {
                                                                                            "type": "Identifier",
                                                                                            "name": "i"
                                                                                        },
                                                                                        "right": {
                                                                                            "type": "Identifier",
                                                                                            "name": "len"
                                                                                        }
                                                                                    },
                                                                                    "update": {
                                                                                        "type": "UpdateExpression",
                                                                                        "operator": "++",
                                                                                        "argument": {
                                                                                            "type": "Identifier",
                                                                                            "name": "i"
                                                                                        },
                                                                                        "prefix": false
                                                                                    },
                                                                                    "body": {
                                                                                        "type": "BlockStatement",
                                                                                        "body": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "MemberExpression",
                                                                                                        "computed": false,
                                                                                                        "object": {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": true,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "arr"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Literal",
                                                                                                                "value": 0,
                                                                                                                "raw": "0"
                                                                                                            }
                                                                                                        },
                                                                                                        "property": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "remove"
                                                                                                        }
                                                                                                    },
                                                                                                    "arguments": []
                                                                                                }
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                }
                                                                            ]
                                                                        },
                                                                        "alternate": null
                                                                    },
                                                                    {
                                                                        "type": "ReturnStatement",
                                                                        "argument": {
                                                                            "type": "Identifier",
                                                                            "name": "tickerCount"
                                                                        }
                                                                    }
                                                                ]
                                                            },
                                                            "generator": false,
                                                            "expression": false,
                                                            "async": false
                                                        },
                                                        {
                                                            "type": "ReturnStatement",
                                                            "argument": {
                                                                "type": "Identifier",
                                                                "name": "toggleFn"
                                                            }
                                                        }
                                                    ]
                                                },
                                                "generator": false,
                                                "expression": false,
                                                "async": false
                                            },
                                            "arguments": []
                                        }
                                    }
                                ],
                                "kind": "var"
                            },
                            {
                                "type": "FunctionDeclaration",
                                "id": {
                                    "type": "Identifier",
                                    "name": "toggleTickerCount"
                                },
                                "params": [],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": []
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            {
                                "type": "VariableDeclaration",
                                "declarations": [
                                    {
                                        "type": "VariableDeclarator",
                                        "id": {
                                            "type": "Identifier",
                                            "name": "tickerArr"
                                        },
                                        "init": {
                                            "type": "ArrayExpression",
                                            "elements": []
                                        }
                                    }
                                ],
                                "kind": "var"
                            },
                            {
                                "type": "VariableDeclaration",
                                "declarations": [
                                    {
                                        "type": "VariableDeclarator",
                                        "id": {
                                            "type": "Identifier",
                                            "name": "elementInx"
                                        },
                                        "init": {
                                            "type": "Literal",
                                            "value": 0,
                                            "raw": "0"
                                        }
                                    }
                                ],
                                "kind": "var"
                            },
                            {
                                "type": "VariableDeclaration",
                                "declarations": [
                                    {
                                        "type": "VariableDeclarator",
                                        "id": {
                                            "type": "Identifier",
                                            "name": "value"
                                        },
                                        "init": {
                                            "type": "Literal",
                                            "value": "",
                                            "raw": "\"\""
                                        }
                                    }
                                ],
                                "kind": "var"
                            },
                            {
                                "type": "VariableDeclaration",
                                "declarations": [
                                    {
                                        "type": "VariableDeclarator",
                                        "id": {
                                            "type": "Identifier",
                                            "name": "autoScroll"
                                        },
                                        "init": null
                                    }
                                ],
                                "kind": "var"
                            },
                            {
                                "type": "VariableDeclaration",
                                "declarations": [
                                    {
                                        "type": "VariableDeclarator",
                                        "id": {
                                            "type": "Identifier",
                                            "name": "intervalSeq"
                                        },
                                        "init": {
                                            "type": "Literal",
                                            "value": 0,
                                            "raw": "0"
                                        }
                                    }
                                ],
                                "kind": "var"
                            },
                            {
                                "type": "VariableDeclaration",
                                "declarations": [
                                    {
                                        "type": "VariableDeclarator",
                                        "id": {
                                            "type": "Identifier",
                                            "name": "colCount"
                                        },
                                        "init": {
                                            "type": "Literal",
                                            "value": 0,
                                            "raw": "0"
                                        }
                                    }
                                ],
                                "kind": "var"
                            },
                            {
                                "type": "VariableDeclaration",
                                "declarations": [
                                    {
                                        "type": "VariableDeclarator",
                                        "id": {
                                            "type": "Identifier",
                                            "name": "__monitoringReloadCount__"
                                        },
                                        "init": {
                                            "type": "Literal",
                                            "value": 0,
                                            "raw": "0"
                                        }
                                    }
                                ],
                                "kind": "var"
                            },
                            {
                                "type": "VariableDeclaration",
                                "declarations": [
                                    {
                                        "type": "VariableDeclarator",
                                        "id": {
                                            "type": "Identifier",
                                            "name": "blackList"
                                        },
                                        "init": {
                                            "type": "ArrayExpression",
                                            "elements": []
                                        }
                                    }
                                ],
                                "kind": "var"
                            },
                            {
                                "type": "VariableDeclaration",
                                "declarations": [
                                    {
                                        "type": "VariableDeclarator",
                                        "id": {
                                            "type": "Identifier",
                                            "name": "exceptList"
                                        },
                                        "init": {
                                            "type": "ArrayExpression",
                                            "elements": []
                                        }
                                    }
                                ],
                                "kind": "var"
                            },
                            {
                                "type": "VariableDeclaration",
                                "declarations": [
                                    {
                                        "type": "VariableDeclarator",
                                        "id": {
                                            "type": "Identifier",
                                            "name": "intervalTime"
                                        },
                                        "init": {
                                            "type": "Literal",
                                            "value": 1000,
                                            "raw": "1000"
                                        }
                                    }
                                ],
                                "kind": "var"
                            },
                            {
                                "type": "VariableDeclaration",
                                "declarations": [
                                    {
                                        "type": "VariableDeclarator",
                                        "id": {
                                            "type": "Identifier",
                                            "name": "M100"
                                        },
                                        "init": {
                                            "type": "Literal",
                                            "value": "m100",
                                            "raw": "\"m100\""
                                        }
                                    }
                                ],
                                "kind": "var"
                            },
                            {
                                "type": "VariableDeclaration",
                                "declarations": [
                                    {
                                        "type": "VariableDeclarator",
                                        "id": {
                                            "type": "Identifier",
                                            "name": "isWordWrap"
                                        },
                                        "init": {
                                            "type": "Literal",
                                            "value": "",
                                            "raw": "\"\""
                                        }
                                    }
                                ],
                                "kind": "var"
                            },
                            {
                                "type": "VariableDeclaration",
                                "declarations": [
                                    {
                                        "type": "VariableDeclarator",
                                        "id": {
                                            "type": "Identifier",
                                            "name": "winKeyArr"
                                        },
                                        "init": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                    "type": "Identifier",
                                                    "name": "Object"
                                                },
                                                "property": {
                                                    "type": "Identifier",
                                                    "name": "keys"
                                                }
                                            },
                                            "arguments": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "window"
                                                }
                                            ]
                                        }
                                    }
                                ],
                                "kind": "var"
                            },
                            {
                                "type": "VariableDeclaration",
                                "declarations": [
                                    {
                                        "type": "VariableDeclarator",
                                        "id": {
                                            "type": "Identifier",
                                            "name": "pastObj"
                                        },
                                        "init": {
                                            "type": "ObjectExpression",
                                            "properties": []
                                        }
                                    }
                                ],
                                "kind": "var"
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "LogicalExpression",
                                    "operator": "||",
                                    "left": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "window"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "localStorage"
                                                    }
                                                },
                                                "property": {
                                                    "type": "Identifier",
                                                    "name": "getItem"
                                                }
                                            },
                                            "arguments": [
                                                {
                                                    "type": "Literal",
                                                    "value": "exceptList",
                                                    "raw": "\"exceptList\""
                                                }
                                            ]
                                        },
                                        "right": {
                                            "type": "Literal",
                                            "value": null,
                                            "raw": "null"
                                        }
                                    },
                                    "right": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "window"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "localStorage"
                                                    }
                                                },
                                                "property": {
                                                    "type": "Identifier",
                                                    "name": "getItem"
                                                }
                                            },
                                            "arguments": [
                                                {
                                                    "type": "Literal",
                                                    "value": "exceptList",
                                                    "raw": "\"exceptList\""
                                                }
                                            ]
                                        },
                                        "right": {
                                            "type": "Literal",
                                            "value": "",
                                            "raw": "\"\""
                                        }
                                    }
                                },
                                "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "exceptList"
                                                },
                                                "right": {
                                                    "type": "ArrayExpression",
                                                    "elements": []
                                                }
                                            }
                                        }
                                    ]
                                },
                                "alternate": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "exceptList"
                                                },
                                                "right": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "window"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "localStorage"
                                                                    }
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "getItem"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Literal",
                                                                    "value": "exceptList",
                                                                    "raw": "\"exceptList\""
                                                                }
                                                            ]
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "split"
                                                        }
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "Literal",
                                                            "value": ",",
                                                            "raw": "\",\""
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "type": "ForStatement",
                                            "init": {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "i"
                                                        },
                                                        "init": {
                                                            "type": "Literal",
                                                            "value": 0,
                                                            "raw": "0"
                                                        }
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            "test": {
                                                "type": "BinaryExpression",
                                                "operator": "<",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "i"
                                                },
                                                "right": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "exceptList"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "length"
                                                    }
                                                }
                                            },
                                            "update": {
                                                "type": "UpdateExpression",
                                                "operator": "++",
                                                "argument": {
                                                    "type": "Identifier",
                                                    "name": "i"
                                                },
                                                "prefix": false
                                            },
                                            "body": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "Identifier",
                                                                "name": "makeExceptSpan"
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "MemberExpression",
                                                                    "computed": true,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "exceptList"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "i"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "LogicalExpression",
                                    "operator": "||",
                                    "left": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "window"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "localStorage"
                                                    }
                                                },
                                                "property": {
                                                    "type": "Identifier",
                                                    "name": "getItem"
                                                }
                                            },
                                            "arguments": [
                                                {
                                                    "type": "Literal",
                                                    "value": "intervalTime",
                                                    "raw": "\"intervalTime\""
                                                }
                                            ]
                                        },
                                        "right": {
                                            "type": "Literal",
                                            "value": null,
                                            "raw": "null"
                                        }
                                    },
                                    "right": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "window"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "localStorage"
                                                    }
                                                },
                                                "property": {
                                                    "type": "Identifier",
                                                    "name": "getItem"
                                                }
                                            },
                                            "arguments": [
                                                {
                                                    "type": "Literal",
                                                    "value": "intervalTime",
                                                    "raw": "\"intervalTime\""
                                                }
                                            ]
                                        },
                                        "right": {
                                            "type": "Literal",
                                            "value": "",
                                            "raw": "\"\""
                                        }
                                    }
                                },
                                "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "intervalTime"
                                                },
                                                "right": {
                                                    "type": "Literal",
                                                    "value": 1000,
                                                    "raw": "1000"
                                                }
                                            }
                                        }
                                    ]
                                },
                                "alternate": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "intervalTime"
                                                },
                                                "right": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "window"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "localStorage"
                                                            }
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "getItem"
                                                        }
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "Literal",
                                                            "value": "intervalTime",
                                                            "raw": "\"intervalTime\""
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "document"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "getElementById"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Literal",
                                                                "value": "__intervalTime__",
                                                                "raw": "\"__intervalTime__\""
                                                            }
                                                        ]
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "value"
                                                    }
                                                },
                                                "right": {
                                                    "type": "Identifier",
                                                    "name": "intervalTime"
                                                }
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "LogicalExpression",
                                    "operator": "||",
                                    "left": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "window"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "localStorage"
                                                    }
                                                },
                                                "property": {
                                                    "type": "Identifier",
                                                    "name": "getItem"
                                                }
                                            },
                                            "arguments": [
                                                {
                                                    "type": "Literal",
                                                    "value": "autoScroll",
                                                    "raw": "\"autoScroll\""
                                                }
                                            ]
                                        },
                                        "right": {
                                            "type": "Literal",
                                            "value": null,
                                            "raw": "null"
                                        }
                                    },
                                    "right": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "window"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "localStorage"
                                                    }
                                                },
                                                "property": {
                                                    "type": "Identifier",
                                                    "name": "getItem"
                                                }
                                            },
                                            "arguments": [
                                                {
                                                    "type": "Literal",
                                                    "value": "autoScroll",
                                                    "raw": "\"autoScroll\""
                                                }
                                            ]
                                        },
                                        "right": {
                                            "type": "Literal",
                                            "value": "",
                                            "raw": "\"\""
                                        }
                                    }
                                },
                                "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "autoScroll"
                                                },
                                                "right": {
                                                    "type": "Literal",
                                                    "value": true,
                                                    "raw": "true"
                                                }
                                            }
                                        }
                                    ]
                                },
                                "alternate": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "autoScroll"
                                                },
                                                "right": {
                                                    "type": "BinaryExpression",
                                                    "operator": "===",
                                                    "left": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "window"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "localStorage"
                                                                }
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "getItem"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Literal",
                                                                "value": "autoScroll",
                                                                "raw": "\"autoScroll\""
                                                            }
                                                        ]
                                                    },
                                                    "right": {
                                                        "type": "Literal",
                                                        "value": "true",
                                                        "raw": "\"true\""
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                    "type": "Identifier",
                                                    "name": "document"
                                                },
                                                "property": {
                                                    "type": "Identifier",
                                                    "name": "getElementById"
                                                }
                                            },
                                            "arguments": [
                                                {
                                                    "type": "Literal",
                                                    "value": "__scrollCheckbox__",
                                                    "raw": "\"__scrollCheckbox__\""
                                                }
                                            ]
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "checked"
                                        }
                                    },
                                    "right": {
                                        "type": "Identifier",
                                        "name": "autoScroll"
                                    }
                                }
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "LogicalExpression",
                                    "operator": "||",
                                    "left": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "window"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "localStorage"
                                                    }
                                                },
                                                "property": {
                                                    "type": "Identifier",
                                                    "name": "getItem"
                                                }
                                            },
                                            "arguments": [
                                                {
                                                    "type": "Literal",
                                                    "value": "M100",
                                                    "raw": "\"M100\""
                                                }
                                            ]
                                        },
                                        "right": {
                                            "type": "Literal",
                                            "value": null,
                                            "raw": "null"
                                        }
                                    },
                                    "right": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "window"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "localStorage"
                                                    }
                                                },
                                                "property": {
                                                    "type": "Identifier",
                                                    "name": "getItem"
                                                }
                                            },
                                            "arguments": [
                                                {
                                                    "type": "Literal",
                                                    "value": "M100",
                                                    "raw": "\"M100\""
                                                }
                                            ]
                                        },
                                        "right": {
                                            "type": "Literal",
                                            "value": "",
                                            "raw": "\"\""
                                        }
                                    }
                                },
                                "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "M100"
                                                },
                                                "right": {
                                                    "type": "Literal",
                                                    "value": "m100",
                                                    "raw": "\"m100\""
                                                }
                                            }
                                        }
                                    ]
                                },
                                "alternate": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "M100"
                                                },
                                                "right": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "window"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "localStorage"
                                                            }
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "getItem"
                                                        }
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "Literal",
                                                            "value": "M100",
                                                            "raw": "\"M100\""
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "document"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "getElementById"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Literal",
                                                                "value": "__cellWidth100__",
                                                                "raw": "\"__cellWidth100__\""
                                                            }
                                                        ]
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "value"
                                                    }
                                                },
                                                "right": {
                                                    "type": "Identifier",
                                                    "name": "M100"
                                                }
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "LogicalExpression",
                                    "operator": "||",
                                    "left": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "window"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "localStorage"
                                                    }
                                                },
                                                "property": {
                                                    "type": "Identifier",
                                                    "name": "getItem"
                                                }
                                            },
                                            "arguments": [
                                                {
                                                    "type": "Literal",
                                                    "value": "isWordWrap",
                                                    "raw": "\"isWordWrap\""
                                                }
                                            ]
                                        },
                                        "right": {
                                            "type": "Literal",
                                            "value": null,
                                            "raw": "null"
                                        }
                                    },
                                    "right": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "window"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "localStorage"
                                                    }
                                                },
                                                "property": {
                                                    "type": "Identifier",
                                                    "name": "getItem"
                                                }
                                            },
                                            "arguments": [
                                                {
                                                    "type": "Literal",
                                                    "value": "isWordWrap",
                                                    "raw": "\"isWordWrap\""
                                                }
                                            ]
                                        },
                                        "right": {
                                            "type": "Literal",
                                            "value": "",
                                            "raw": "\"\""
                                        }
                                    }
                                },
                                "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "isWordWrap"
                                                },
                                                "right": {
                                                    "type": "Literal",
                                                    "value": "",
                                                    "raw": "\"\""
                                                }
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "document"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "getElementById"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Literal",
                                                                "value": "__wordWrapCheckbox__",
                                                                "raw": "\"__wordWrapCheckbox__\""
                                                            }
                                                        ]
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "checked"
                                                    }
                                                },
                                                "right": {
                                                    "type": "Literal",
                                                    "value": false,
                                                    "raw": "false"
                                                }
                                            }
                                        }
                                    ]
                                },
                                "alternate": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "isWordWrap"
                                                },
                                                "right": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "window"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "localStorage"
                                                            }
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "getItem"
                                                        }
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "Literal",
                                                            "value": "isWordWrap",
                                                            "raw": "\"isWordWrap\""
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "document"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "getElementById"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Literal",
                                                                "value": "__wordWrapCheckbox__",
                                                                "raw": "\"__wordWrapCheckbox__\""
                                                            }
                                                        ]
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "checked"
                                                    }
                                                },
                                                "right": {
                                                    "type": "BinaryExpression",
                                                    "operator": "===",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "isWordWrap"
                                                    },
                                                    "right": {
                                                        "type": "Literal",
                                                        "value": "wordWrap",
                                                        "raw": "\"wordWrap\""
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "FunctionDeclaration",
                                "id": {
                                    "type": "Identifier",
                                    "name": "run"
                                },
                                "params": [],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "UpdateExpression",
                                                "operator": "++",
                                                "argument": {
                                                    "type": "Identifier",
                                                    "name": "intervalSeq"
                                                },
                                                "prefix": false
                                            }
                                        },
                                        {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                                {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                        "type": "Identifier",
                                                        "name": "startTime"
                                                    },
                                                    "init": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "NewExpression",
                                                                "callee": {
                                                                    "type": "Identifier",
                                                                    "name": "Date"
                                                                },
                                                                "arguments": []
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "getTime"
                                                            }
                                                        },
                                                        "arguments": []
                                                    }
                                                }
                                            ],
                                            "kind": "var"
                                        },
                                        {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                                {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                        "type": "Identifier",
                                                        "name": "isChange"
                                                    },
                                                    "init": {
                                                        "type": "Literal",
                                                        "value": false,
                                                        "raw": "false"
                                                    }
                                                }
                                            ],
                                            "kind": "var"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "test": {
                                                "type": "BinaryExpression",
                                                "operator": "===",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "opener"
                                                },
                                                "right": {
                                                    "type": "Literal",
                                                    "value": null,
                                                    "raw": "null"
                                                }
                                            },
                                            "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "Identifier",
                                                                "name": "clearInterval"
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "runInterval"
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "console"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "error"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Literal",
                                                                    "value": "opener is null",
                                                                    "raw": "\"opener is null\""
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "ReturnStatement",
                                                        "argument": null
                                                    }
                                                ]
                                            },
                                            "alternate": null
                                        },
                                        {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                                {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                        "type": "Identifier",
                                                        "name": "targetObj"
                                                    },
                                                    "init": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "opener"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "window"
                                                        }
                                                    }
                                                }
                                            ],
                                            "kind": "var"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "test": {
                                                "type": "BinaryExpression",
                                                "operator": "===",
                                                "left": {
                                                    "type": "UnaryExpression",
                                                    "operator": "typeof",
                                                    "argument": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "targetObj"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "__monitoringReloadCount__"
                                                        }
                                                    },
                                                    "prefix": true
                                                },
                                                "right": {
                                                    "type": "Literal",
                                                    "value": "undefined",
                                                    "raw": "\"undefined\""
                                                }
                                            },
                                            "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "Identifier",
                                                                "name": "c"
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Literal",
                                                                    "value": ">>>> parent loading",
                                                                    "raw": "\">>>> parent loading\""
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "targetObj"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "__monitoringReloadCount__"
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "UpdateExpression",
                                                                "operator": "++",
                                                                "argument": {
                                                                    "type": "Identifier",
                                                                    "name": "__monitoringReloadCount__"
                                                                },
                                                                "prefix": true
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                                "type": "Identifier",
                                                                "name": "blackList"
                                                            },
                                                            "right": {
                                                                "type": "ArrayExpression",
                                                                "elements": []
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                                "type": "Identifier",
                                                                "name": "isChange"
                                                            },
                                                            "right": {
                                                                "type": "Literal",
                                                                "value": true,
                                                                "raw": "true"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            "alternate": null
                                        },
                                        {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                                {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                        "type": "Identifier",
                                                        "name": "tKeyArr"
                                                    },
                                                    "init": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "Object"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "keys"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Identifier",
                                                                "name": "targetObj"
                                                            }
                                                        ]
                                                    }
                                                }
                                            ],
                                            "kind": "var"
                                        },
                                        {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                                {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                        "type": "Identifier",
                                                        "name": "newObj"
                                                    },
                                                    "init": {
                                                        "type": "ObjectExpression",
                                                        "properties": []
                                                    }
                                                }
                                            ],
                                            "kind": "var"
                                        },
                                        {
                                            "type": "ForInStatement",
                                            "left": {
                                                "type": "Identifier",
                                                "name": "i"
                                            },
                                            "right": {
                                                "type": "Identifier",
                                                "name": "tKeyArr"
                                            },
                                            "body": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "VariableDeclaration",
                                                        "declarations": [
                                                            {
                                                                "type": "VariableDeclarator",
                                                                "id": {
                                                                    "type": "Identifier",
                                                                    "name": "k"
                                                                },
                                                                "init": {
                                                                    "type": "MemberExpression",
                                                                    "computed": true,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "tKeyArr"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "i"
                                                                    }
                                                                }
                                                            }
                                                        ],
                                                        "kind": "var"
                                                    },
                                                    {
                                                        "type": "IfStatement",
                                                        "test": {
                                                            "type": "BinaryExpression",
                                                            "operator": "===",
                                                            "left": {
                                                                "type": "UnaryExpression",
                                                                "operator": "typeof",
                                                                "argument": {
                                                                    "type": "MemberExpression",
                                                                    "computed": true,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "targetObj"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "k"
                                                                    }
                                                                },
                                                                "prefix": true
                                                            },
                                                            "right": {
                                                                "type": "Literal",
                                                                "value": "function",
                                                                "raw": "\"function\""
                                                            }
                                                        },
                                                        "consequent": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "ContinueStatement",
                                                                    "label": null
                                                                }
                                                            ]
                                                        },
                                                        "alternate": null
                                                    },
                                                    {
                                                        "type": "IfStatement",
                                                        "test": {
                                                            "type": "BinaryExpression",
                                                            "operator": "!==",
                                                            "left": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "blackList"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "indexOf"
                                                                    }
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "Identifier",
                                                                        "name": "k"
                                                                    }
                                                                ]
                                                            },
                                                            "right": {
                                                                "type": "UnaryExpression",
                                                                "operator": "-",
                                                                "argument": {
                                                                    "type": "Literal",
                                                                    "value": 1,
                                                                    "raw": "1"
                                                                },
                                                                "prefix": true
                                                            }
                                                        },
                                                        "consequent": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "ContinueStatement",
                                                                    "label": null
                                                                }
                                                            ]
                                                        },
                                                        "alternate": null
                                                    },
                                                    {
                                                        "type": "IfStatement",
                                                        "test": {
                                                            "type": "BinaryExpression",
                                                            "operator": "!==",
                                                            "left": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "exceptList"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "indexOf"
                                                                    }
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "Identifier",
                                                                        "name": "k"
                                                                    }
                                                                ]
                                                            },
                                                            "right": {
                                                                "type": "UnaryExpression",
                                                                "operator": "-",
                                                                "argument": {
                                                                    "type": "Literal",
                                                                    "value": 1,
                                                                    "raw": "1"
                                                                },
                                                                "prefix": true
                                                            }
                                                        },
                                                        "consequent": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "ContinueStatement",
                                                                    "label": null
                                                                }
                                                            ]
                                                        },
                                                        "alternate": null
                                                    },
                                                    {
                                                        "type": "IfStatement",
                                                        "test": {
                                                            "type": "BinaryExpression",
                                                            "operator": "===",
                                                            "left": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "winKeyArr"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "indexOf"
                                                                    }
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "Identifier",
                                                                        "name": "k"
                                                                    }
                                                                ]
                                                            },
                                                            "right": {
                                                                "type": "UnaryExpression",
                                                                "operator": "-",
                                                                "argument": {
                                                                    "type": "Literal",
                                                                    "value": 1,
                                                                    "raw": "1"
                                                                },
                                                                "prefix": true
                                                            }
                                                        },
                                                        "consequent": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "VariableDeclaration",
                                                                    "declarations": [
                                                                        {
                                                                            "type": "VariableDeclarator",
                                                                            "id": {
                                                                                "type": "Identifier",
                                                                                "name": "tVal"
                                                                            },
                                                                            "init": null
                                                                        },
                                                                        {
                                                                            "type": "VariableDeclarator",
                                                                            "id": {
                                                                                "type": "Identifier",
                                                                                "name": "status"
                                                                            },
                                                                            "init": null
                                                                        }
                                                                    ],
                                                                    "kind": "var"
                                                                },
                                                                {
                                                                    "type": "TryStatement",
                                                                    "block": {
                                                                        "type": "BlockStatement",
                                                                        "body": [
                                                                            {
                                                                                "type": "IfStatement",
                                                                                "test": {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "===",
                                                                                    "left": {
                                                                                        "type": "CallExpression",
                                                                                        "callee": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": false,
                                                                                            "object": {
                                                                                                "type": "CallExpression",
                                                                                                "callee": {
                                                                                                    "type": "MemberExpression",
                                                                                                    "computed": false,
                                                                                                    "object": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "Object"
                                                                                                    },
                                                                                                    "property": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "keys"
                                                                                                    }
                                                                                                },
                                                                                                "arguments": [
                                                                                                    {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "pastObj"
                                                                                                    }
                                                                                                ]
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Identifier",
                                                                                                "name": "indexOf"
                                                                                            }
                                                                                        },
                                                                                        "arguments": [
                                                                                            {
                                                                                                "type": "Identifier",
                                                                                                "name": "k"
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "UnaryExpression",
                                                                                        "operator": "-",
                                                                                        "argument": {
                                                                                            "type": "Literal",
                                                                                            "value": 1,
                                                                                            "raw": "1"
                                                                                        },
                                                                                        "prefix": true
                                                                                    }
                                                                                },
                                                                                "consequent": {
                                                                                    "type": "BlockStatement",
                                                                                    "body": [
                                                                                        {
                                                                                            "type": "ExpressionStatement",
                                                                                            "expression": {
                                                                                                "type": "AssignmentExpression",
                                                                                                "operator": "=",
                                                                                                "left": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "isChange"
                                                                                                },
                                                                                                "right": {
                                                                                                    "type": "Literal",
                                                                                                    "value": true,
                                                                                                    "raw": "true"
                                                                                                }
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "type": "ExpressionStatement",
                                                                                            "expression": {
                                                                                                "type": "AssignmentExpression",
                                                                                                "operator": "=",
                                                                                                "left": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "status"
                                                                                                },
                                                                                                "right": {
                                                                                                    "type": "Literal",
                                                                                                    "value": "n",
                                                                                                    "raw": "\"n\""
                                                                                                }
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "type": "ExpressionStatement",
                                                                                            "expression": {
                                                                                                "type": "AssignmentExpression",
                                                                                                "operator": "=",
                                                                                                "left": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "tVal"
                                                                                                },
                                                                                                "right": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "MemberExpression",
                                                                                                        "computed": false,
                                                                                                        "object": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "JSON"
                                                                                                        },
                                                                                                        "property": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "stringify"
                                                                                                        }
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": true,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "targetObj"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "k"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                "alternate": {
                                                                                    "type": "BlockStatement",
                                                                                    "body": [
                                                                                        {
                                                                                            "type": "VariableDeclaration",
                                                                                            "declarations": [
                                                                                                {
                                                                                                    "type": "VariableDeclarator",
                                                                                                    "id": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "pStr"
                                                                                                    },
                                                                                                    "init": {
                                                                                                        "type": "MemberExpression",
                                                                                                        "computed": false,
                                                                                                        "object": {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": true,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "pastObj"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "k"
                                                                                                            }
                                                                                                        },
                                                                                                        "property": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "v"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            ],
                                                                                            "kind": "var"
                                                                                        },
                                                                                        {
                                                                                            "type": "VariableDeclaration",
                                                                                            "declarations": [
                                                                                                {
                                                                                                    "type": "VariableDeclarator",
                                                                                                    "id": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "tStr"
                                                                                                    },
                                                                                                    "init": {
                                                                                                        "type": "CallExpression",
                                                                                                        "callee": {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "JSON"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "stringify"
                                                                                                            }
                                                                                                        },
                                                                                                        "arguments": [
                                                                                                            {
                                                                                                                "type": "MemberExpression",
                                                                                                                "computed": true,
                                                                                                                "object": {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "targetObj"
                                                                                                                },
                                                                                                                "property": {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "k"
                                                                                                                }
                                                                                                            }
                                                                                                        ]
                                                                                                    }
                                                                                                }
                                                                                            ],
                                                                                            "kind": "var"
                                                                                        },
                                                                                        {
                                                                                            "type": "IfStatement",
                                                                                            "test": {
                                                                                                "type": "BinaryExpression",
                                                                                                "operator": "===",
                                                                                                "left": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "pStr"
                                                                                                },
                                                                                                "right": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "tStr"
                                                                                                }
                                                                                            },
                                                                                            "consequent": {
                                                                                                "type": "BlockStatement",
                                                                                                "body": [
                                                                                                    {
                                                                                                        "type": "ExpressionStatement",
                                                                                                        "expression": {
                                                                                                            "type": "AssignmentExpression",
                                                                                                            "operator": "=",
                                                                                                            "left": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tVal"
                                                                                                            },
                                                                                                            "right": {
                                                                                                                "type": "MemberExpression",
                                                                                                                "computed": false,
                                                                                                                "object": {
                                                                                                                    "type": "MemberExpression",
                                                                                                                    "computed": true,
                                                                                                                    "object": {
                                                                                                                        "type": "Identifier",
                                                                                                                        "name": "pastObj"
                                                                                                                    },
                                                                                                                    "property": {
                                                                                                                        "type": "Identifier",
                                                                                                                        "name": "k"
                                                                                                                    }
                                                                                                                },
                                                                                                                "property": {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "v"
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    },
                                                                                                    {
                                                                                                        "type": "ExpressionStatement",
                                                                                                        "expression": {
                                                                                                            "type": "AssignmentExpression",
                                                                                                            "operator": "=",
                                                                                                            "left": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "status"
                                                                                                            },
                                                                                                            "right": {
                                                                                                                "type": "Literal",
                                                                                                                "value": "s",
                                                                                                                "raw": "\"s\""
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                ]
                                                                                            },
                                                                                            "alternate": {
                                                                                                "type": "BlockStatement",
                                                                                                "body": [
                                                                                                    {
                                                                                                        "type": "ExpressionStatement",
                                                                                                        "expression": {
                                                                                                            "type": "AssignmentExpression",
                                                                                                            "operator": "=",
                                                                                                            "left": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "isChange"
                                                                                                            },
                                                                                                            "right": {
                                                                                                                "type": "Literal",
                                                                                                                "value": true,
                                                                                                                "raw": "true"
                                                                                                            }
                                                                                                        }
                                                                                                    },
                                                                                                    {
                                                                                                        "type": "ExpressionStatement",
                                                                                                        "expression": {
                                                                                                            "type": "AssignmentExpression",
                                                                                                            "operator": "=",
                                                                                                            "left": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "status"
                                                                                                            },
                                                                                                            "right": {
                                                                                                                "type": "Literal",
                                                                                                                "value": "c",
                                                                                                                "raw": "\"c\""
                                                                                                            }
                                                                                                        }
                                                                                                    },
                                                                                                    {
                                                                                                        "type": "ExpressionStatement",
                                                                                                        "expression": {
                                                                                                            "type": "AssignmentExpression",
                                                                                                            "operator": "=",
                                                                                                            "left": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tVal"
                                                                                                            },
                                                                                                            "right": {
                                                                                                                "type": "CallExpression",
                                                                                                                "callee": {
                                                                                                                    "type": "MemberExpression",
                                                                                                                    "computed": false,
                                                                                                                    "object": {
                                                                                                                        "type": "Identifier",
                                                                                                                        "name": "JSON"
                                                                                                                    },
                                                                                                                    "property": {
                                                                                                                        "type": "Identifier",
                                                                                                                        "name": "stringify"
                                                                                                                    }
                                                                                                                },
                                                                                                                "arguments": [
                                                                                                                    {
                                                                                                                        "type": "MemberExpression",
                                                                                                                        "computed": true,
                                                                                                                        "object": {
                                                                                                                            "type": "Identifier",
                                                                                                                            "name": "targetObj"
                                                                                                                        },
                                                                                                                        "property": {
                                                                                                                            "type": "Identifier",
                                                                                                                            "name": "k"
                                                                                                                        }
                                                                                                                    }
                                                                                                                ]
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    "handler": {
                                                                        "type": "CatchClause",
                                                                        "param": {
                                                                            "type": "Identifier",
                                                                            "name": "e"
                                                                        },
                                                                        "body": {
                                                                            "type": "BlockStatement",
                                                                            "body": [
                                                                                {
                                                                                    "type": "IfStatement",
                                                                                    "test": {
                                                                                        "type": "BinaryExpression",
                                                                                        "operator": "===",
                                                                                        "left": {
                                                                                            "type": "CallExpression",
                                                                                            "callee": {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": false,
                                                                                                "object": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "e"
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "toString"
                                                                                                }
                                                                                            },
                                                                                            "arguments": []
                                                                                        },
                                                                                        "right": {
                                                                                            "type": "Literal",
                                                                                            "value": "TypeError: Converting circular structure to JSON",
                                                                                            "raw": "\"TypeError: Converting circular structure to JSON\""
                                                                                        }
                                                                                    },
                                                                                    "consequent": {
                                                                                        "type": "BlockStatement",
                                                                                        "body": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "c"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "BinaryExpression",
                                                                                                            "operator": "+",
                                                                                                            "left": {
                                                                                                                "type": "BinaryExpression",
                                                                                                                "operator": "+",
                                                                                                                "left": {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "e"
                                                                                                                },
                                                                                                                "right": {
                                                                                                                    "type": "Literal",
                                                                                                                    "value": ", key=",
                                                                                                                    "raw": "\", key=\""
                                                                                                                }
                                                                                                            },
                                                                                                            "right": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "k"
                                                                                                            }
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "BinaryExpression",
                                                                                                            "operator": "+",
                                                                                                            "left": {
                                                                                                                "type": "Literal",
                                                                                                                "value": " value=",
                                                                                                                "raw": "\" value=\""
                                                                                                            },
                                                                                                            "right": {
                                                                                                                "type": "MemberExpression",
                                                                                                                "computed": true,
                                                                                                                "object": {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "targetObj"
                                                                                                                },
                                                                                                                "property": {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "k"
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    "alternate": {
                                                                                        "type": "BlockStatement",
                                                                                        "body": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "c"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "e"
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "type": "ExpressionStatement",
                                                                                    "expression": {
                                                                                        "type": "CallExpression",
                                                                                        "callee": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": false,
                                                                                            "object": {
                                                                                                "type": "Identifier",
                                                                                                "name": "blackList"
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Identifier",
                                                                                                "name": "push"
                                                                                            }
                                                                                        },
                                                                                        "arguments": [
                                                                                            {
                                                                                                "type": "Identifier",
                                                                                                "name": "k"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "type": "ContinueStatement",
                                                                                    "label": null
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    "finalizer": null
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "=",
                                                                        "left": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "newObj"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "k"
                                                                            }
                                                                        },
                                                                        "right": {
                                                                            "type": "ObjectExpression",
                                                                            "properties": [
                                                                                {
                                                                                    "type": "Property",
                                                                                    "key": {
                                                                                        "type": "Identifier",
                                                                                        "name": "s"
                                                                                    },
                                                                                    "computed": false,
                                                                                    "value": {
                                                                                        "type": "Identifier",
                                                                                        "name": "status"
                                                                                    },
                                                                                    "kind": "init",
                                                                                    "method": false,
                                                                                    "shorthand": false
                                                                                },
                                                                                {
                                                                                    "type": "Property",
                                                                                    "key": {
                                                                                        "type": "Identifier",
                                                                                        "name": "v"
                                                                                    },
                                                                                    "computed": false,
                                                                                    "value": {
                                                                                        "type": "Identifier",
                                                                                        "name": "tVal"
                                                                                    },
                                                                                    "kind": "init",
                                                                                    "method": false,
                                                                                    "shorthand": false
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "alternate": null
                                                    }
                                                ]
                                            },
                                            "each": false
                                        },
                                        {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                                {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                        "type": "Identifier",
                                                        "name": "deleteList"
                                                    },
                                                    "init": {
                                                        "type": "ArrayExpression",
                                                        "elements": []
                                                    }
                                                }
                                            ],
                                            "kind": "var"
                                        },
                                        {
                                            "type": "ForInStatement",
                                            "left": {
                                                "type": "Identifier",
                                                "name": "k"
                                            },
                                            "right": {
                                                "type": "Identifier",
                                                "name": "pastObj"
                                            },
                                            "body": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "IfStatement",
                                                        "test": {
                                                            "type": "BinaryExpression",
                                                            "operator": "===",
                                                            "left": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "tKeyArr"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "indexOf"
                                                                    }
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "Identifier",
                                                                        "name": "k"
                                                                    }
                                                                ]
                                                            },
                                                            "right": {
                                                                "type": "UnaryExpression",
                                                                "operator": "-",
                                                                "argument": {
                                                                    "type": "Literal",
                                                                    "value": 1,
                                                                    "raw": "1"
                                                                },
                                                                "prefix": true
                                                            }
                                                        },
                                                        "consequent": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                            "type": "Identifier",
                                                                            "name": "c"
                                                                        },
                                                                        "arguments": [
                                                                            {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "+",
                                                                                "left": {
                                                                                    "type": "Identifier",
                                                                                    "name": "k"
                                                                                },
                                                                                "right": {
                                                                                    "type": "Literal",
                                                                                    "value": " deleted",
                                                                                    "raw": "\" deleted\""
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "deleteList"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "push"
                                                                            }
                                                                        },
                                                                        "arguments": [
                                                                            {
                                                                                "type": "Identifier",
                                                                                "name": "k"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "=",
                                                                        "left": {
                                                                            "type": "Identifier",
                                                                            "name": "isChange"
                                                                        },
                                                                        "right": {
                                                                            "type": "Literal",
                                                                            "value": true,
                                                                            "raw": "true"
                                                                        }
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "alternate": null
                                                    }
                                                ]
                                            },
                                            "each": false
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "pastObj"
                                                },
                                                "right": {
                                                    "type": "Identifier",
                                                    "name": "newObj"
                                                }
                                            }
                                        },
                                        {
                                            "type": "IfStatement",
                                            "test": {
                                                "type": "Identifier",
                                                "name": "isChange"
                                            },
                                            "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "VariableDeclaration",
                                                        "declarations": [
                                                            {
                                                                "type": "VariableDeclarator",
                                                                "id": {
                                                                    "type": "Identifier",
                                                                    "name": "resultDiv"
                                                                },
                                                                "init": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "document"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "getElementById"
                                                                        }
                                                                    },
                                                                    "arguments": [
                                                                        {
                                                                            "type": "Literal",
                                                                            "value": "__monitoringResult__",
                                                                            "raw": "\"__monitoringResult__\""
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        ],
                                                        "kind": "var"
                                                    },
                                                    {
                                                        "type": "ForInStatement",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "k"
                                                        },
                                                        "right": {
                                                            "type": "Identifier",
                                                            "name": "newObj"
                                                        },
                                                        "body": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "IfStatement",
                                                                    "test": {
                                                                        "type": "BinaryExpression",
                                                                        "operator": "===",
                                                                        "left": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "newObj"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "k"
                                                                                }
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "s"
                                                                            }
                                                                        },
                                                                        "right": {
                                                                            "type": "Literal",
                                                                            "value": "n",
                                                                            "raw": "\"n\""
                                                                        }
                                                                    },
                                                                    "consequent": {
                                                                        "type": "BlockStatement",
                                                                        "body": [
                                                                            {
                                                                                "type": "VariableDeclaration",
                                                                                "declarations": [
                                                                                    {
                                                                                        "type": "VariableDeclarator",
                                                                                        "id": {
                                                                                            "type": "Identifier",
                                                                                            "name": "existDiv"
                                                                                        },
                                                                                        "init": {
                                                                                            "type": "CallExpression",
                                                                                            "callee": {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": false,
                                                                                                "object": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "document"
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "getElementById"
                                                                                                }
                                                                                            },
                                                                                            "arguments": [
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "k"
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    }
                                                                                ],
                                                                                "kind": "var"
                                                                            },
                                                                            {
                                                                                "type": "VariableDeclaration",
                                                                                "declarations": [
                                                                                    {
                                                                                        "type": "VariableDeclarator",
                                                                                        "id": {
                                                                                            "type": "Identifier",
                                                                                            "name": "addSize"
                                                                                        },
                                                                                        "init": {
                                                                                            "type": "Identifier",
                                                                                            "name": "colCount"
                                                                                        }
                                                                                    }
                                                                                ],
                                                                                "kind": "var"
                                                                            },
                                                                            {
                                                                                "type": "IfStatement",
                                                                                "test": {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "===",
                                                                                    "left": {
                                                                                        "type": "Identifier",
                                                                                        "name": "existDiv"
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "Literal",
                                                                                        "value": null,
                                                                                        "raw": "null"
                                                                                    }
                                                                                },
                                                                                "consequent": {
                                                                                    "type": "BlockStatement",
                                                                                    "body": [
                                                                                        {
                                                                                            "type": "VariableDeclaration",
                                                                                            "declarations": [
                                                                                                {
                                                                                                    "type": "VariableDeclarator",
                                                                                                    "id": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "pDiv"
                                                                                                    },
                                                                                                    "init": {
                                                                                                        "type": "CallExpression",
                                                                                                        "callee": {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "document"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "createElement"
                                                                                                            }
                                                                                                        },
                                                                                                        "arguments": [
                                                                                                            {
                                                                                                                "type": "Literal",
                                                                                                                "value": "div",
                                                                                                                "raw": "'div'"
                                                                                                            }
                                                                                                        ]
                                                                                                    }
                                                                                                }
                                                                                            ],
                                                                                            "kind": "var"
                                                                                        },
                                                                                        {
                                                                                            "type": "ExpressionStatement",
                                                                                            "expression": {
                                                                                                "type": "AssignmentExpression",
                                                                                                "operator": "=",
                                                                                                "left": {
                                                                                                    "type": "MemberExpression",
                                                                                                    "computed": false,
                                                                                                    "object": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "pDiv"
                                                                                                    },
                                                                                                    "property": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "id"
                                                                                                    }
                                                                                                },
                                                                                                "right": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "k"
                                                                                                }
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "type": "ExpressionStatement",
                                                                                            "expression": {
                                                                                                "type": "AssignmentExpression",
                                                                                                "operator": "=",
                                                                                                "left": {
                                                                                                    "type": "MemberExpression",
                                                                                                    "computed": false,
                                                                                                    "object": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "pDiv"
                                                                                                    },
                                                                                                    "property": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "className"
                                                                                                    }
                                                                                                },
                                                                                                "right": {
                                                                                                    "type": "Literal",
                                                                                                    "value": "m1",
                                                                                                    "raw": "'m1'"
                                                                                                }
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "type": "ExpressionStatement",
                                                                                            "expression": {
                                                                                                "type": "CallExpression",
                                                                                                "callee": {
                                                                                                    "type": "MemberExpression",
                                                                                                    "computed": false,
                                                                                                    "object": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "resultDiv"
                                                                                                    },
                                                                                                    "property": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "appendChild"
                                                                                                    }
                                                                                                },
                                                                                                "arguments": [
                                                                                                    {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "pDiv"
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                "alternate": {
                                                                                    "type": "BlockStatement",
                                                                                    "body": [
                                                                                        {
                                                                                            "type": "ExpressionStatement",
                                                                                            "expression": {
                                                                                                "type": "AssignmentExpression",
                                                                                                "operator": "=",
                                                                                                "left": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "addSize"
                                                                                                },
                                                                                                "right": {
                                                                                                    "type": "BinaryExpression",
                                                                                                    "operator": "-",
                                                                                                    "left": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addSize"
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "BinaryExpression",
                                                                                                        "operator": "-",
                                                                                                        "left": {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "existDiv"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "childElementCount"
                                                                                                            }
                                                                                                        },
                                                                                                        "right": {
                                                                                                            "type": "Literal",
                                                                                                            "value": 1,
                                                                                                            "raw": "1"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            },
                                                                            {
                                                                                "type": "IfStatement",
                                                                                "test": {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": ">",
                                                                                    "left": {
                                                                                        "type": "Identifier",
                                                                                        "name": "addSize"
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "Literal",
                                                                                        "value": 0,
                                                                                        "raw": "0"
                                                                                    }
                                                                                },
                                                                                "consequent": {
                                                                                    "type": "BlockStatement",
                                                                                    "body": [
                                                                                        {
                                                                                            "type": "ForStatement",
                                                                                            "init": {
                                                                                                "type": "VariableDeclaration",
                                                                                                "declarations": [
                                                                                                    {
                                                                                                        "type": "VariableDeclarator",
                                                                                                        "id": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "index"
                                                                                                        },
                                                                                                        "init": {
                                                                                                            "type": "Literal",
                                                                                                            "value": 0,
                                                                                                            "raw": "0"
                                                                                                        }
                                                                                                    }
                                                                                                ],
                                                                                                "kind": "var"
                                                                                            },
                                                                                            "test": {
                                                                                                "type": "BinaryExpression",
                                                                                                "operator": "<",
                                                                                                "left": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "index"
                                                                                                },
                                                                                                "right": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "addSize"
                                                                                                }
                                                                                            },
                                                                                            "update": {
                                                                                                "type": "UpdateExpression",
                                                                                                "operator": "++",
                                                                                                "argument": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "index"
                                                                                                },
                                                                                                "prefix": false
                                                                                            },
                                                                                            "body": {
                                                                                                "type": "BlockStatement",
                                                                                                "body": [
                                                                                                    {
                                                                                                        "type": "IfStatement",
                                                                                                        "test": {
                                                                                                            "type": "LogicalExpression",
                                                                                                            "operator": "&&",
                                                                                                            "left": {
                                                                                                                "type": "BinaryExpression",
                                                                                                                "operator": "===",
                                                                                                                "left": {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "index"
                                                                                                                },
                                                                                                                "right": {
                                                                                                                    "type": "Literal",
                                                                                                                    "value": 0,
                                                                                                                    "raw": "0"
                                                                                                                }
                                                                                                            },
                                                                                                            "right": {
                                                                                                                "type": "BinaryExpression",
                                                                                                                "operator": "===",
                                                                                                                "left": {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "existDiv"
                                                                                                                },
                                                                                                                "right": {
                                                                                                                    "type": "Literal",
                                                                                                                    "value": null,
                                                                                                                    "raw": "null"
                                                                                                                }
                                                                                                            }
                                                                                                        },
                                                                                                        "consequent": {
                                                                                                            "type": "BlockStatement",
                                                                                                            "body": [
                                                                                                                {
                                                                                                                    "type": "ExpressionStatement",
                                                                                                                    "expression": {
                                                                                                                        "type": "CallExpression",
                                                                                                                        "callee": {
                                                                                                                            "type": "Identifier",
                                                                                                                            "name": "createElement2"
                                                                                                                        },
                                                                                                                        "arguments": [
                                                                                                                            {
                                                                                                                                "type": "Literal",
                                                                                                                                "value": "div",
                                                                                                                                "raw": "'div'"
                                                                                                                            },
                                                                                                                            {
                                                                                                                                "type": "Literal",
                                                                                                                                "value": null,
                                                                                                                                "raw": "null"
                                                                                                                            },
                                                                                                                            {
                                                                                                                                "type": "Literal",
                                                                                                                                "value": "m2_head desc po_copy",
                                                                                                                                "raw": "'m2_head desc po_copy'"
                                                                                                                            },
                                                                                                                            {
                                                                                                                                "type": "Identifier",
                                                                                                                                "name": "k"
                                                                                                                            },
                                                                                                                            {
                                                                                                                                "type": "Identifier",
                                                                                                                                "name": "k"
                                                                                                                            },
                                                                                                                            {
                                                                                                                                "type": "Identifier",
                                                                                                                                "name": "removeRowFn"
                                                                                                                            }
                                                                                                                        ]
                                                                                                                    }
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "ExpressionStatement",
                                                                                                                    "expression": {
                                                                                                                        "type": "CallExpression",
                                                                                                                        "callee": {
                                                                                                                            "type": "Identifier",
                                                                                                                            "name": "createElement2"
                                                                                                                        },
                                                                                                                        "arguments": [
                                                                                                                            {
                                                                                                                                "type": "Literal",
                                                                                                                                "value": "div",
                                                                                                                                "raw": "'div'"
                                                                                                                            },
                                                                                                                            {
                                                                                                                                "type": "BinaryExpression",
                                                                                                                                "operator": "+",
                                                                                                                                "left": {
                                                                                                                                    "type": "Literal",
                                                                                                                                    "value": "__right__",
                                                                                                                                    "raw": "\"__right__\""
                                                                                                                                },
                                                                                                                                "right": {
                                                                                                                                    "type": "Identifier",
                                                                                                                                    "name": "k"
                                                                                                                                }
                                                                                                                            },
                                                                                                                            {
                                                                                                                                "type": "Literal",
                                                                                                                                "value": "m2_right desc po_copy",
                                                                                                                                "raw": "'m2_right desc po_copy'"
                                                                                                                            },
                                                                                                                            {
                                                                                                                                "type": "Identifier",
                                                                                                                                "name": "k"
                                                                                                                            },
                                                                                                                            {
                                                                                                                                "type": "Identifier",
                                                                                                                                "name": "k"
                                                                                                                            },
                                                                                                                            {
                                                                                                                                "type": "Identifier",
                                                                                                                                "name": "removeRowFn"
                                                                                                                            }
                                                                                                                        ]
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        "alternate": {
                                                                                                            "type": "BlockStatement",
                                                                                                            "body": [
                                                                                                                {
                                                                                                                    "type": "VariableDeclaration",
                                                                                                                    "declarations": [
                                                                                                                        {
                                                                                                                            "type": "VariableDeclarator",
                                                                                                                            "id": {
                                                                                                                                "type": "Identifier",
                                                                                                                                "name": "iDiv"
                                                                                                                            },
                                                                                                                            "init": {
                                                                                                                                "type": "CallExpression",
                                                                                                                                "callee": {
                                                                                                                                    "type": "Identifier",
                                                                                                                                    "name": "createElement2"
                                                                                                                                },
                                                                                                                                "arguments": [
                                                                                                                                    {
                                                                                                                                        "type": "Literal",
                                                                                                                                        "value": "div",
                                                                                                                                        "raw": "'div'"
                                                                                                                                    },
                                                                                                                                    {
                                                                                                                                        "type": "Literal",
                                                                                                                                        "value": null,
                                                                                                                                        "raw": "null"
                                                                                                                                    },
                                                                                                                                    {
                                                                                                                                        "type": "BinaryExpression",
                                                                                                                                        "operator": "+",
                                                                                                                                        "left": {
                                                                                                                                            "type": "BinaryExpression",
                                                                                                                                            "operator": "+",
                                                                                                                                            "left": {
                                                                                                                                                "type": "BinaryExpression",
                                                                                                                                                "operator": "+",
                                                                                                                                                "left": {
                                                                                                                                                    "type": "Literal",
                                                                                                                                                    "value": "m2 po ",
                                                                                                                                                    "raw": "'m2 po '"
                                                                                                                                                },
                                                                                                                                                "right": {
                                                                                                                                                    "type": "Identifier",
                                                                                                                                                    "name": "M100"
                                                                                                                                                }
                                                                                                                                            },
                                                                                                                                            "right": {
                                                                                                                                                "type": "Literal",
                                                                                                                                                "value": " ",
                                                                                                                                                "raw": "' '"
                                                                                                                                            }
                                                                                                                                        },
                                                                                                                                        "right": {
                                                                                                                                            "type": "Identifier",
                                                                                                                                            "name": "isWordWrap"
                                                                                                                                        }
                                                                                                                                    },
                                                                                                                                    {
                                                                                                                                        "type": "Literal",
                                                                                                                                        "value": "",
                                                                                                                                        "raw": "''"
                                                                                                                                    },
                                                                                                                                    {
                                                                                                                                        "type": "Identifier",
                                                                                                                                        "name": "k"
                                                                                                                                    },
                                                                                                                                    {
                                                                                                                                        "type": "Literal",
                                                                                                                                        "value": false,
                                                                                                                                        "raw": "false"
                                                                                                                                    }
                                                                                                                                ]
                                                                                                                            }
                                                                                                                        }
                                                                                                                    ],
                                                                                                                    "kind": "var"
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "ExpressionStatement",
                                                                                                                    "expression": {
                                                                                                                        "type": "CallExpression",
                                                                                                                        "callee": {
                                                                                                                            "type": "MemberExpression",
                                                                                                                            "computed": false,
                                                                                                                            "object": {
                                                                                                                                "type": "CallExpression",
                                                                                                                                "callee": {
                                                                                                                                    "type": "MemberExpression",
                                                                                                                                    "computed": false,
                                                                                                                                    "object": {
                                                                                                                                        "type": "Identifier",
                                                                                                                                        "name": "document"
                                                                                                                                    },
                                                                                                                                    "property": {
                                                                                                                                        "type": "Identifier",
                                                                                                                                        "name": "getElementById"
                                                                                                                                    }
                                                                                                                                },
                                                                                                                                "arguments": [
                                                                                                                                    {
                                                                                                                                        "type": "Identifier",
                                                                                                                                        "name": "k"
                                                                                                                                    }
                                                                                                                                ]
                                                                                                                            },
                                                                                                                            "property": {
                                                                                                                                "type": "Identifier",
                                                                                                                                "name": "insertBefore"
                                                                                                                            }
                                                                                                                        },
                                                                                                                        "arguments": [
                                                                                                                            {
                                                                                                                                "type": "Identifier",
                                                                                                                                "name": "iDiv"
                                                                                                                            },
                                                                                                                            {
                                                                                                                                "type": "CallExpression",
                                                                                                                                "callee": {
                                                                                                                                    "type": "MemberExpression",
                                                                                                                                    "computed": false,
                                                                                                                                    "object": {
                                                                                                                                        "type": "Identifier",
                                                                                                                                        "name": "document"
                                                                                                                                    },
                                                                                                                                    "property": {
                                                                                                                                        "type": "Identifier",
                                                                                                                                        "name": "getElementById"
                                                                                                                                    }
                                                                                                                                },
                                                                                                                                "arguments": [
                                                                                                                                    {
                                                                                                                                        "type": "BinaryExpression",
                                                                                                                                        "operator": "+",
                                                                                                                                        "left": {
                                                                                                                                            "type": "Literal",
                                                                                                                                            "value": "__right__",
                                                                                                                                            "raw": "\"__right__\""
                                                                                                                                        },
                                                                                                                                        "right": {
                                                                                                                                            "type": "Identifier",
                                                                                                                                            "name": "k"
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                ]
                                                                                                                            }
                                                                                                                        ]
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                "alternate": {
                                                                                    "type": "IfStatement",
                                                                                    "test": {
                                                                                        "type": "BinaryExpression",
                                                                                        "operator": "===",
                                                                                        "left": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": false,
                                                                                            "object": {
                                                                                                "type": "CallExpression",
                                                                                                "callee": {
                                                                                                    "type": "MemberExpression",
                                                                                                    "computed": false,
                                                                                                    "object": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "document"
                                                                                                    },
                                                                                                    "property": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "getElementById"
                                                                                                    }
                                                                                                },
                                                                                                "arguments": [
                                                                                                    {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "k"
                                                                                                    }
                                                                                                ]
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Identifier",
                                                                                                "name": "childElementCount"
                                                                                            }
                                                                                        },
                                                                                        "right": {
                                                                                            "type": "Literal",
                                                                                            "value": 0,
                                                                                            "raw": "0"
                                                                                        }
                                                                                    },
                                                                                    "consequent": {
                                                                                        "type": "BlockStatement",
                                                                                        "body": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "createElement2"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "div",
                                                                                                            "raw": "'div'"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": null,
                                                                                                            "raw": "null"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "m2_head desc po_copy",
                                                                                                            "raw": "'m2_head desc po_copy'"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "k"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "k"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "removeRowFn"
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "createElement2"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "div",
                                                                                                            "raw": "'div'"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "BinaryExpression",
                                                                                                            "operator": "+",
                                                                                                            "left": {
                                                                                                                "type": "Literal",
                                                                                                                "value": "__right__",
                                                                                                                "raw": "\"__right__\""
                                                                                                            },
                                                                                                            "right": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "k"
                                                                                                            }
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "m2_right desc po_copy",
                                                                                                            "raw": "'m2_right desc po_copy'"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "k"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "k"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "removeRowFn"
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    "alternate": null
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    "alternate": null
                                                                },
                                                                {
                                                                    "type": "VariableDeclaration",
                                                                    "declarations": [
                                                                        {
                                                                            "type": "VariableDeclarator",
                                                                            "id": {
                                                                                "type": "Identifier",
                                                                                "name": "className"
                                                                            },
                                                                            "init": {
                                                                                "type": "Literal",
                                                                                "value": "",
                                                                                "raw": "''"
                                                                            }
                                                                        }
                                                                    ],
                                                                    "kind": "var"
                                                                },
                                                                {
                                                                    "type": "IfStatement",
                                                                    "test": {
                                                                        "type": "BinaryExpression",
                                                                        "operator": "===",
                                                                        "left": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "newObj"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "k"
                                                                                }
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "s"
                                                                            }
                                                                        },
                                                                        "right": {
                                                                            "type": "Literal",
                                                                            "value": "n",
                                                                            "raw": "\"n\""
                                                                        }
                                                                    },
                                                                    "consequent": {
                                                                        "type": "BlockStatement",
                                                                        "body": [
                                                                            {
                                                                                "type": "ExpressionStatement",
                                                                                "expression": {
                                                                                    "type": "AssignmentExpression",
                                                                                    "operator": "=",
                                                                                    "left": {
                                                                                        "type": "Identifier",
                                                                                        "name": "className"
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "BinaryExpression",
                                                                                        "operator": "+",
                                                                                        "left": {
                                                                                            "type": "BinaryExpression",
                                                                                            "operator": "+",
                                                                                            "left": {
                                                                                                "type": "BinaryExpression",
                                                                                                "operator": "+",
                                                                                                "left": {
                                                                                                    "type": "Literal",
                                                                                                    "value": "m2 m5 po ",
                                                                                                    "raw": "'m2 m5 po '"
                                                                                                },
                                                                                                "right": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "M100"
                                                                                                }
                                                                                            },
                                                                                            "right": {
                                                                                                "type": "Literal",
                                                                                                "value": " ",
                                                                                                "raw": "' '"
                                                                                            }
                                                                                        },
                                                                                        "right": {
                                                                                            "type": "Identifier",
                                                                                            "name": "isWordWrap"
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    "alternate": {
                                                                        "type": "IfStatement",
                                                                        "test": {
                                                                            "type": "BinaryExpression",
                                                                            "operator": "===",
                                                                            "left": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": true,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "newObj"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "k"
                                                                                    }
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "s"
                                                                                }
                                                                            },
                                                                            "right": {
                                                                                "type": "Literal",
                                                                                "value": "c",
                                                                                "raw": "\"c\""
                                                                            }
                                                                        },
                                                                        "consequent": {
                                                                            "type": "BlockStatement",
                                                                            "body": [
                                                                                {
                                                                                    "type": "ExpressionStatement",
                                                                                    "expression": {
                                                                                        "type": "AssignmentExpression",
                                                                                        "operator": "=",
                                                                                        "left": {
                                                                                            "type": "Identifier",
                                                                                            "name": "className"
                                                                                        },
                                                                                        "right": {
                                                                                            "type": "BinaryExpression",
                                                                                            "operator": "+",
                                                                                            "left": {
                                                                                                "type": "BinaryExpression",
                                                                                                "operator": "+",
                                                                                                "left": {
                                                                                                    "type": "BinaryExpression",
                                                                                                    "operator": "+",
                                                                                                    "left": {
                                                                                                        "type": "Literal",
                                                                                                        "value": "m2 m3 po ",
                                                                                                        "raw": "'m2 m3 po '"
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "M100"
                                                                                                    }
                                                                                                },
                                                                                                "right": {
                                                                                                    "type": "Literal",
                                                                                                    "value": " ",
                                                                                                    "raw": "' '"
                                                                                                }
                                                                                            },
                                                                                            "right": {
                                                                                                "type": "Identifier",
                                                                                                "name": "isWordWrap"
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            ]
                                                                        },
                                                                        "alternate": {
                                                                            "type": "BlockStatement",
                                                                            "body": [
                                                                                {
                                                                                    "type": "ExpressionStatement",
                                                                                    "expression": {
                                                                                        "type": "AssignmentExpression",
                                                                                        "operator": "=",
                                                                                        "left": {
                                                                                            "type": "Identifier",
                                                                                            "name": "className"
                                                                                        },
                                                                                        "right": {
                                                                                            "type": "BinaryExpression",
                                                                                            "operator": "+",
                                                                                            "left": {
                                                                                                "type": "BinaryExpression",
                                                                                                "operator": "+",
                                                                                                "left": {
                                                                                                    "type": "BinaryExpression",
                                                                                                    "operator": "+",
                                                                                                    "left": {
                                                                                                        "type": "Literal",
                                                                                                        "value": "m2 po ",
                                                                                                        "raw": "'m2 po '"
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "M100"
                                                                                                    }
                                                                                                },
                                                                                                "right": {
                                                                                                    "type": "Literal",
                                                                                                    "value": " ",
                                                                                                    "raw": "' '"
                                                                                                }
                                                                                            },
                                                                                            "right": {
                                                                                                "type": "Identifier",
                                                                                                "name": "isWordWrap"
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                },
                                                                {
                                                                    "type": "IfStatement",
                                                                    "test": {
                                                                        "type": "BinaryExpression",
                                                                        "operator": "===",
                                                                        "left": {
                                                                            "type": "Identifier",
                                                                            "name": "isWordWrap"
                                                                        },
                                                                        "right": {
                                                                            "type": "Literal",
                                                                            "value": "wordWrap",
                                                                            "raw": "\"wordWrap\""
                                                                        }
                                                                    },
                                                                    "consequent": {
                                                                        "type": "BlockStatement",
                                                                        "body": [
                                                                            {
                                                                                "type": "ExpressionStatement",
                                                                                "expression": {
                                                                                    "type": "AssignmentExpression",
                                                                                    "operator": "=",
                                                                                    "left": {
                                                                                        "type": "Identifier",
                                                                                        "name": "value"
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "CallExpression",
                                                                                        "callee": {
                                                                                            "type": "Identifier",
                                                                                            "name": "beautyContentWithPre"
                                                                                        },
                                                                                        "arguments": [
                                                                                            {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": false,
                                                                                                "object": {
                                                                                                    "type": "MemberExpression",
                                                                                                    "computed": true,
                                                                                                    "object": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "newObj"
                                                                                                    },
                                                                                                    "property": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "k"
                                                                                                    }
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "v"
                                                                                                }
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    "alternate": {
                                                                        "type": "BlockStatement",
                                                                        "body": [
                                                                            {
                                                                                "type": "ExpressionStatement",
                                                                                "expression": {
                                                                                    "type": "AssignmentExpression",
                                                                                    "operator": "=",
                                                                                    "left": {
                                                                                        "type": "Identifier",
                                                                                        "name": "value"
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": true,
                                                                                            "object": {
                                                                                                "type": "Identifier",
                                                                                                "name": "newObj"
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Identifier",
                                                                                                "name": "k"
                                                                                            }
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "v"
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "type": "VariableDeclaration",
                                                                    "declarations": [
                                                                        {
                                                                            "type": "VariableDeclarator",
                                                                            "id": {
                                                                                "type": "Identifier",
                                                                                "name": "iDiv"
                                                                            },
                                                                            "init": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                    "type": "Identifier",
                                                                                    "name": "createElement2"
                                                                                },
                                                                                "arguments": [
                                                                                    {
                                                                                        "type": "Literal",
                                                                                        "value": "div",
                                                                                        "raw": "'div'"
                                                                                    },
                                                                                    {
                                                                                        "type": "Literal",
                                                                                        "value": null,
                                                                                        "raw": "null"
                                                                                    },
                                                                                    {
                                                                                        "type": "Identifier",
                                                                                        "name": "className"
                                                                                    },
                                                                                    {
                                                                                        "type": "Identifier",
                                                                                        "name": "value"
                                                                                    },
                                                                                    {
                                                                                        "type": "Identifier",
                                                                                        "name": "k"
                                                                                    },
                                                                                    {
                                                                                        "type": "Identifier",
                                                                                        "name": "contentClickFn"
                                                                                    },
                                                                                    {
                                                                                        "type": "Literal",
                                                                                        "value": false,
                                                                                        "raw": "false"
                                                                                    }
                                                                                ]
                                                                            }
                                                                        }
                                                                    ],
                                                                    "kind": "var"
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "document"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "getElementById"
                                                                                    }
                                                                                },
                                                                                "arguments": [
                                                                                    {
                                                                                        "type": "Identifier",
                                                                                        "name": "k"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "insertBefore"
                                                                            }
                                                                        },
                                                                        "arguments": [
                                                                            {
                                                                                "type": "Identifier",
                                                                                "name": "iDiv"
                                                                            },
                                                                            {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "document"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "getElementById"
                                                                                    }
                                                                                },
                                                                                "arguments": [
                                                                                    {
                                                                                        "type": "BinaryExpression",
                                                                                        "operator": "+",
                                                                                        "left": {
                                                                                            "type": "Literal",
                                                                                            "value": "__right__",
                                                                                            "raw": "\"__right__\""
                                                                                        },
                                                                                        "right": {
                                                                                            "type": "Identifier",
                                                                                            "name": "k"
                                                                                        }
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "each": false
                                                    },
                                                    {
                                                        "type": "IfStatement",
                                                        "test": {
                                                            "type": "BinaryExpression",
                                                            "operator": ">",
                                                            "left": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "deleteList"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "length"
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "Literal",
                                                                "value": 0,
                                                                "raw": "0"
                                                            }
                                                        },
                                                        "consequent": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "ForInStatement",
                                                                    "left": {
                                                                        "type": "Identifier",
                                                                        "name": "i"
                                                                    },
                                                                    "right": {
                                                                        "type": "Identifier",
                                                                        "name": "deleteList"
                                                                    },
                                                                    "body": {
                                                                        "type": "BlockStatement",
                                                                        "body": [
                                                                            {
                                                                                "type": "VariableDeclaration",
                                                                                "declarations": [
                                                                                    {
                                                                                        "type": "VariableDeclarator",
                                                                                        "id": {
                                                                                            "type": "Identifier",
                                                                                            "name": "iDiv"
                                                                                        },
                                                                                        "init": {
                                                                                            "type": "CallExpression",
                                                                                            "callee": {
                                                                                                "type": "Identifier",
                                                                                                "name": "createElement2"
                                                                                            },
                                                                                            "arguments": [
                                                                                                {
                                                                                                    "type": "Literal",
                                                                                                    "value": "div",
                                                                                                    "raw": "'div'"
                                                                                                },
                                                                                                {
                                                                                                    "type": "Literal",
                                                                                                    "value": null,
                                                                                                    "raw": "null"
                                                                                                },
                                                                                                {
                                                                                                    "type": "BinaryExpression",
                                                                                                    "operator": "+",
                                                                                                    "left": {
                                                                                                        "type": "BinaryExpression",
                                                                                                        "operator": "+",
                                                                                                        "left": {
                                                                                                            "type": "BinaryExpression",
                                                                                                            "operator": "+",
                                                                                                            "left": {
                                                                                                                "type": "Literal",
                                                                                                                "value": "m2 m4 po ",
                                                                                                                "raw": "'m2 m4 po '"
                                                                                                            },
                                                                                                            "right": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "M100"
                                                                                                            }
                                                                                                        },
                                                                                                        "right": {
                                                                                                            "type": "Literal",
                                                                                                            "value": " ",
                                                                                                            "raw": "' '"
                                                                                                        }
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "isWordWrap"
                                                                                                    }
                                                                                                },
                                                                                                {
                                                                                                    "type": "Literal",
                                                                                                    "value": "deleted",
                                                                                                    "raw": "'deleted'"
                                                                                                },
                                                                                                {
                                                                                                    "type": "MemberExpression",
                                                                                                    "computed": true,
                                                                                                    "object": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "deleteList"
                                                                                                    },
                                                                                                    "property": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "i"
                                                                                                    }
                                                                                                },
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "contentClickFn"
                                                                                                },
                                                                                                {
                                                                                                    "type": "Literal",
                                                                                                    "value": false,
                                                                                                    "raw": "false"
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    }
                                                                                ],
                                                                                "kind": "var"
                                                                            },
                                                                            {
                                                                                "type": "ExpressionStatement",
                                                                                "expression": {
                                                                                    "type": "CallExpression",
                                                                                    "callee": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "CallExpression",
                                                                                            "callee": {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": false,
                                                                                                "object": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "document"
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "getElementById"
                                                                                                }
                                                                                            },
                                                                                            "arguments": [
                                                                                                {
                                                                                                    "type": "MemberExpression",
                                                                                                    "computed": true,
                                                                                                    "object": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "deleteList"
                                                                                                    },
                                                                                                    "property": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "i"
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "insertBefore"
                                                                                        }
                                                                                    },
                                                                                    "arguments": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "iDiv"
                                                                                        },
                                                                                        {
                                                                                            "type": "CallExpression",
                                                                                            "callee": {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": false,
                                                                                                "object": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "document"
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "getElementById"
                                                                                                }
                                                                                            },
                                                                                            "arguments": [
                                                                                                {
                                                                                                    "type": "BinaryExpression",
                                                                                                    "operator": "+",
                                                                                                    "left": {
                                                                                                        "type": "Literal",
                                                                                                        "value": "__right__",
                                                                                                        "raw": "\"__right__\""
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "MemberExpression",
                                                                                                        "computed": true,
                                                                                                        "object": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "deleteList"
                                                                                                        },
                                                                                                        "property": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "i"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    "each": false
                                                                }
                                                            ]
                                                        },
                                                        "alternate": null
                                                    },
                                                    {
                                                        "type": "VariableDeclaration",
                                                        "declarations": [
                                                            {
                                                                "type": "VariableDeclarator",
                                                                "id": {
                                                                    "type": "Identifier",
                                                                    "name": "iDiv"
                                                                },
                                                                "init": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "Identifier",
                                                                        "name": "createElement2"
                                                                    },
                                                                    "arguments": [
                                                                        {
                                                                            "type": "Literal",
                                                                            "value": "div",
                                                                            "raw": "'div'"
                                                                        },
                                                                        {
                                                                            "type": "Literal",
                                                                            "value": null,
                                                                            "raw": "null"
                                                                        },
                                                                        {
                                                                            "type": "BinaryExpression",
                                                                            "operator": "+",
                                                                            "left": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "+",
                                                                                "left": {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "+",
                                                                                    "left": {
                                                                                        "type": "Literal",
                                                                                        "value": "m2 po ",
                                                                                        "raw": "'m2 po '"
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "Identifier",
                                                                                        "name": "M100"
                                                                                    }
                                                                                },
                                                                                "right": {
                                                                                    "type": "Literal",
                                                                                    "value": " ",
                                                                                    "raw": "' '"
                                                                                }
                                                                            },
                                                                            "right": {
                                                                                "type": "Identifier",
                                                                                "name": "isWordWrap"
                                                                            }
                                                                        },
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "intervalSeq"
                                                                        },
                                                                        {
                                                                            "type": "Literal",
                                                                            "value": "__monitoringInterval__",
                                                                            "raw": "'__monitoringInterval__'"
                                                                        },
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "contentClickFn"
                                                                        },
                                                                        {
                                                                            "type": "Literal",
                                                                            "value": false,
                                                                            "raw": "false"
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        ],
                                                        "kind": "var"
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "document"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "getElementById"
                                                                        }
                                                                    },
                                                                    "arguments": [
                                                                        {
                                                                            "type": "Literal",
                                                                            "value": "__monitoringInterval__",
                                                                            "raw": "\"__monitoringInterval__\""
                                                                        }
                                                                    ]
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "insertBefore"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "iDiv"
                                                                },
                                                                {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "document"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "getElementById"
                                                                        }
                                                                    },
                                                                    "arguments": [
                                                                        {
                                                                            "type": "Literal",
                                                                            "value": "__right__monitoringInterval__",
                                                                            "raw": "\"__right__monitoringInterval__\""
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "VariableDeclaration",
                                                        "declarations": [
                                                            {
                                                                "type": "VariableDeclarator",
                                                                "id": {
                                                                    "type": "Identifier",
                                                                    "name": "myDate"
                                                                },
                                                                "init": {
                                                                    "type": "NewExpression",
                                                                    "callee": {
                                                                        "type": "Identifier",
                                                                        "name": "Date"
                                                                    },
                                                                    "arguments": []
                                                                }
                                                            }
                                                        ],
                                                        "kind": "var"
                                                    },
                                                    {
                                                        "type": "VariableDeclaration",
                                                        "declarations": [
                                                            {
                                                                "type": "VariableDeclarator",
                                                                "id": {
                                                                    "type": "Identifier",
                                                                    "name": "dateStr"
                                                                },
                                                                "init": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "+",
                                                                    "left": {
                                                                        "type": "BinaryExpression",
                                                                        "operator": "+",
                                                                        "left": {
                                                                            "type": "BinaryExpression",
                                                                            "operator": "+",
                                                                            "left": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "+",
                                                                                "left": {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "+",
                                                                                    "left": {
                                                                                        "type": "BinaryExpression",
                                                                                        "operator": "+",
                                                                                        "left": {
                                                                                            "type": "BinaryExpression",
                                                                                            "operator": "+",
                                                                                            "left": {
                                                                                                "type": "BinaryExpression",
                                                                                                "operator": "+",
                                                                                                "left": {
                                                                                                    "type": "BinaryExpression",
                                                                                                    "operator": "+",
                                                                                                    "left": {
                                                                                                        "type": "CallExpression",
                                                                                                        "callee": {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "myDate"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "getHours"
                                                                                                            }
                                                                                                        },
                                                                                                        "arguments": []
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "Literal",
                                                                                                        "value": ":",
                                                                                                        "raw": "\":\""
                                                                                                    }
                                                                                                },
                                                                                                "right": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "MemberExpression",
                                                                                                        "computed": false,
                                                                                                        "object": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "myDate"
                                                                                                        },
                                                                                                        "property": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "getMinutes"
                                                                                                        }
                                                                                                    },
                                                                                                    "arguments": []
                                                                                                }
                                                                                            },
                                                                                            "right": {
                                                                                                "type": "Literal",
                                                                                                "value": ":",
                                                                                                "raw": "\":\""
                                                                                            }
                                                                                        },
                                                                                        "right": {
                                                                                            "type": "CallExpression",
                                                                                            "callee": {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": false,
                                                                                                "object": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "myDate"
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "getSeconds"
                                                                                                }
                                                                                            },
                                                                                            "arguments": []
                                                                                        }
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "Literal",
                                                                                        "value": ", ",
                                                                                        "raw": "\", \""
                                                                                    }
                                                                                },
                                                                                "right": {
                                                                                    "type": "CallExpression",
                                                                                    "callee": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "myDate"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "getMilliseconds"
                                                                                        }
                                                                                    },
                                                                                    "arguments": []
                                                                                }
                                                                            },
                                                                            "right": {
                                                                                "type": "Literal",
                                                                                "value": ", ",
                                                                                "raw": "\", \""
                                                                            }
                                                                        },
                                                                        "right": {
                                                                            "type": "BinaryExpression",
                                                                            "operator": "-",
                                                                            "left": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "myDate"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "getTime"
                                                                                    }
                                                                                },
                                                                                "arguments": []
                                                                            },
                                                                            "right": {
                                                                                "type": "Identifier",
                                                                                "name": "startTime"
                                                                            }
                                                                        }
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": "ms",
                                                                        "raw": "\"ms\""
                                                                    }
                                                                }
                                                            }
                                                        ],
                                                        "kind": "var"
                                                    },
                                                    {
                                                        "type": "VariableDeclaration",
                                                        "declarations": [
                                                            {
                                                                "type": "VariableDeclarator",
                                                                "id": {
                                                                    "type": "Identifier",
                                                                    "name": "iDiv"
                                                                },
                                                                "init": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "Identifier",
                                                                        "name": "createElement2"
                                                                    },
                                                                    "arguments": [
                                                                        {
                                                                            "type": "Literal",
                                                                            "value": "div",
                                                                            "raw": "'div'"
                                                                        },
                                                                        {
                                                                            "type": "Literal",
                                                                            "value": null,
                                                                            "raw": "null"
                                                                        },
                                                                        {
                                                                            "type": "BinaryExpression",
                                                                            "operator": "+",
                                                                            "left": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "+",
                                                                                "left": {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "+",
                                                                                    "left": {
                                                                                        "type": "Literal",
                                                                                        "value": "m2 po ",
                                                                                        "raw": "'m2 po '"
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "Identifier",
                                                                                        "name": "M100"
                                                                                    }
                                                                                },
                                                                                "right": {
                                                                                    "type": "Literal",
                                                                                    "value": " ",
                                                                                    "raw": "' '"
                                                                                }
                                                                            },
                                                                            "right": {
                                                                                "type": "Identifier",
                                                                                "name": "isWordWrap"
                                                                            }
                                                                        },
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "dateStr"
                                                                        },
                                                                        {
                                                                            "type": "Literal",
                                                                            "value": "__monitoringTime__",
                                                                            "raw": "'__monitoringTime__'"
                                                                        },
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "contentClickFn"
                                                                        },
                                                                        {
                                                                            "type": "Literal",
                                                                            "value": false,
                                                                            "raw": "false"
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        ],
                                                        "kind": "var"
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "document"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "getElementById"
                                                                        }
                                                                    },
                                                                    "arguments": [
                                                                        {
                                                                            "type": "Literal",
                                                                            "value": "__monitoringTime__",
                                                                            "raw": "\"__monitoringTime__\""
                                                                        }
                                                                    ]
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "insertBefore"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "iDiv"
                                                                },
                                                                {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "document"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "getElementById"
                                                                        }
                                                                    },
                                                                    "arguments": [
                                                                        {
                                                                            "type": "Literal",
                                                                            "value": "__right__monitoringTime__",
                                                                            "raw": "\"__right__monitoringTime__\""
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "IfStatement",
                                                        "test": {
                                                            "type": "BinaryExpression",
                                                            "operator": "===",
                                                            "left": {
                                                                "type": "Identifier",
                                                                "name": "colCount"
                                                            },
                                                            "right": {
                                                                "type": "Literal",
                                                                "value": 0,
                                                                "raw": "0"
                                                            }
                                                        },
                                                        "consequent": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "+=",
                                                                        "left": {
                                                                            "type": "Identifier",
                                                                            "name": "colCount"
                                                                        },
                                                                        "right": {
                                                                            "type": "Literal",
                                                                            "value": 2,
                                                                            "raw": "2"
                                                                        }
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "alternate": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "UpdateExpression",
                                                                        "operator": "++",
                                                                        "argument": {
                                                                            "type": "Identifier",
                                                                            "name": "colCount"
                                                                        },
                                                                        "prefix": false
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "Identifier",
                                                                "name": "windowWidthResize"
                                                            },
                                                            "arguments": []
                                                        }
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "Identifier",
                                                                "name": "scrollAutoLast"
                                                            },
                                                            "arguments": []
                                                        }
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "document"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "getElementById"
                                                                        }
                                                                    },
                                                                    "arguments": [
                                                                        {
                                                                            "type": "Literal",
                                                                            "value": "__monitoringintervalSeqValid__",
                                                                            "raw": "\"__monitoringintervalSeqValid__\""
                                                                        }
                                                                    ]
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "innerHTML"
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "Identifier",
                                                                "name": "intervalSeq"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            "alternate": null
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "document"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "getElementById"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Literal",
                                                                "value": "__monitoringintervalSeq__",
                                                                "raw": "\"__monitoringintervalSeq__\""
                                                            }
                                                        ]
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "innerHTML"
                                                    }
                                                },
                                                "right": {
                                                    "type": "Identifier",
                                                    "name": "intervalSeq"
                                                }
                                            }
                                        }
                                    ]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            {
                                "type": "VariableDeclaration",
                                "declarations": [
                                    {
                                        "type": "VariableDeclarator",
                                        "id": {
                                            "type": "Identifier",
                                            "name": "isStart"
                                        },
                                        "init": {
                                            "type": "Literal",
                                            "value": false,
                                            "raw": "false"
                                        }
                                    }
                                ],
                                "kind": "var"
                            },
                            {
                                "type": "VariableDeclaration",
                                "declarations": [
                                    {
                                        "type": "VariableDeclarator",
                                        "id": {
                                            "type": "Identifier",
                                            "name": "runInterval"
                                        },
                                        "init": null
                                    }
                                ],
                                "kind": "var"
                            },
                            {
                                "type": "FunctionDeclaration",
                                "id": {
                                    "type": "Identifier",
                                    "name": "startIntervalFn"
                                },
                                "params": [],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "IfStatement",
                                            "test": {
                                                "type": "BinaryExpression",
                                                "operator": "!==",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "opener"
                                                },
                                                "right": {
                                                    "type": "Literal",
                                                    "value": null,
                                                    "raw": "null"
                                                }
                                            },
                                            "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "IfStatement",
                                                        "test": {
                                                            "type": "UnaryExpression",
                                                            "operator": "!",
                                                            "argument": {
                                                                "type": "Identifier",
                                                                "name": "isStart"
                                                            },
                                                            "prefix": true
                                                        },
                                                        "consequent": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "=",
                                                                        "left": {
                                                                            "type": "Identifier",
                                                                            "name": "isStart"
                                                                        },
                                                                        "right": {
                                                                            "type": "Literal",
                                                                            "value": true,
                                                                            "raw": "true"
                                                                        }
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "=",
                                                                        "left": {
                                                                            "type": "Identifier",
                                                                            "name": "runInterval"
                                                                        },
                                                                        "right": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "Identifier",
                                                                                "name": "setInterval"
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "run"
                                                                                },
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "intervalTime"
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "alternate": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "ReturnStatement",
                                                                    "argument": null
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            },
                                            "alternate": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "console"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "error"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Literal",
                                                                    "value": "opener is null",
                                                                    "raw": "\"opener is null\""
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            {
                                "type": "FunctionDeclaration",
                                "id": {
                                    "type": "Identifier",
                                    "name": "stopIntervalFn"
                                },
                                "params": [],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "IfStatement",
                                            "test": {
                                                "type": "Identifier",
                                                "name": "isStart"
                                            },
                                            "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                                "type": "Identifier",
                                                                "name": "isStart"
                                                            },
                                                            "right": {
                                                                "type": "Literal",
                                                                "value": false,
                                                                "raw": "false"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "Identifier",
                                                                "name": "clearInterval"
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "runInterval"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            },
                                            "alternate": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "ReturnStatement",
                                                        "argument": null
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            {
                                "type": "FunctionDeclaration",
                                "id": {
                                    "type": "Identifier",
                                    "name": "contentClickFn"
                                },
                                "params": [],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                                {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                        "type": "Identifier",
                                                        "name": "v"
                                                    },
                                                    "init": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "Identifier",
                                                            "name": "removePre"
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "ThisExpression"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "innerHTML"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                }
                                            ],
                                            "kind": "var"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "Identifier",
                                                    "name": "c2"
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "Identifier",
                                                            "name": "beautyContent"
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Identifier",
                                                                "name": "v"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            {
                                "type": "FunctionDeclaration",
                                "id": {
                                    "type": "Identifier",
                                    "name": "removePre"
                                },
                                "params": [
                                    {
                                        "type": "Identifier",
                                        "name": "str"
                                    }
                                ],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "str"
                                                },
                                                "right": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "str"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "replace"
                                                        }
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "Literal",
                                                            "value": "<pre>",
                                                            "raw": "\"<pre>\""
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "value": "",
                                                            "raw": "\"\""
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "str"
                                                },
                                                "right": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "str"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "replace"
                                                        }
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "Literal",
                                                            "value": "</pre>",
                                                            "raw": "\"</pre>\""
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "value": "",
                                                            "raw": "\"\""
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "str"
                                                },
                                                "right": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "str"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "replace"
                                                        }
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "Literal",
                                                            "value": "/<span class=\"ht1\">/g",
                                                            "raw": "/<span class=\"ht1\">/g",
                                                            "regex": {
                                                                "pattern": "<span class=\"ht1\">",
                                                                "flags": "g"
                                                            }
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "value": "",
                                                            "raw": "\"\""
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "str"
                                                },
                                                "right": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "str"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "replace"
                                                        }
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "Literal",
                                                            "value": "/<span class=\"ht2\">/g",
                                                            "raw": "/<span class=\"ht2\">/g",
                                                            "regex": {
                                                                "pattern": "<span class=\"ht2\">",
                                                                "flags": "g"
                                                            }
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "value": "",
                                                            "raw": "\"\""
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "str"
                                                },
                                                "right": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "str"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "replace"
                                                        }
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "Literal",
                                                            "value": "/<\\/span>/g",
                                                            "raw": "/<\\/span>/g",
                                                            "regex": {
                                                                "pattern": "<\\/span>",
                                                                "flags": "g"
                                                            }
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "value": "",
                                                            "raw": "\"\""
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "console"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "log"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Identifier",
                                                        "name": "str"
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "argument": {
                                                "type": "Identifier",
                                                "name": "str"
                                            }
                                        }
                                    ]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            {
                                "type": "FunctionDeclaration",
                                "id": {
                                    "type": "Identifier",
                                    "name": "beautyContent"
                                },
                                "params": [
                                    {
                                        "type": "Identifier",
                                        "name": "content"
                                    }
                                ],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "TryStatement",
                                            "block": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "VariableDeclaration",
                                                        "declarations": [
                                                            {
                                                                "type": "VariableDeclarator",
                                                                "id": {
                                                                    "type": "Identifier",
                                                                    "name": "obj"
                                                                },
                                                                "init": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "JSON"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "parse"
                                                                        }
                                                                    },
                                                                    "arguments": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "content"
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        ],
                                                        "kind": "var"
                                                    },
                                                    {
                                                        "type": "IfStatement",
                                                        "test": {
                                                            "type": "BinaryExpression",
                                                            "operator": "instanceof",
                                                            "left": {
                                                                "type": "Identifier",
                                                                "name": "obj"
                                                            },
                                                            "right": {
                                                                "type": "Identifier",
                                                                "name": "Object"
                                                            }
                                                        },
                                                        "consequent": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "ReturnStatement",
                                                                    "argument": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "JSON"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "stringify"
                                                                            }
                                                                        },
                                                                        "arguments": [
                                                                            {
                                                                                "type": "Identifier",
                                                                                "name": "obj"
                                                                            },
                                                                            {
                                                                                "type": "Literal",
                                                                                "value": null,
                                                                                "raw": "null"
                                                                            },
                                                                            {
                                                                                "type": "Literal",
                                                                                "value": 4,
                                                                                "raw": "4"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "alternate": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "ReturnStatement",
                                                                    "argument": {
                                                                        "type": "Identifier",
                                                                        "name": "content"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            },
                                            "handler": {
                                                "type": "CatchClause",
                                                "param": {
                                                    "type": "Identifier",
                                                    "name": "e"
                                                },
                                                "body": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                        {
                                                            "type": "ReturnStatement",
                                                            "argument": {
                                                                "type": "Identifier",
                                                                "name": "content"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            "finalizer": null
                                        }
                                    ]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            {
                                "type": "FunctionDeclaration",
                                "id": {
                                    "type": "Identifier",
                                    "name": "beautyContentWithPre"
                                },
                                "params": [
                                    {
                                        "type": "Identifier",
                                        "name": "content"
                                    }
                                ],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "TryStatement",
                                            "block": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "VariableDeclaration",
                                                        "declarations": [
                                                            {
                                                                "type": "VariableDeclarator",
                                                                "id": {
                                                                    "type": "Identifier",
                                                                    "name": "obj"
                                                                },
                                                                "init": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "JSON"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "parse"
                                                                        }
                                                                    },
                                                                    "arguments": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "content"
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        ],
                                                        "kind": "var"
                                                    },
                                                    {
                                                        "type": "IfStatement",
                                                        "test": {
                                                            "type": "BinaryExpression",
                                                            "operator": "instanceof",
                                                            "left": {
                                                                "type": "Identifier",
                                                                "name": "obj"
                                                            },
                                                            "right": {
                                                                "type": "Identifier",
                                                                "name": "Object"
                                                            }
                                                        },
                                                        "consequent": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "ReturnStatement",
                                                                    "argument": {
                                                                        "type": "BinaryExpression",
                                                                        "operator": "+",
                                                                        "left": {
                                                                            "type": "BinaryExpression",
                                                                            "operator": "+",
                                                                            "left": {
                                                                                "type": "Literal",
                                                                                "value": "<pre>",
                                                                                "raw": "\"<pre>\""
                                                                            },
                                                                            "right": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "JSON"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "stringify"
                                                                                    }
                                                                                },
                                                                                "arguments": [
                                                                                    {
                                                                                        "type": "Identifier",
                                                                                        "name": "obj"
                                                                                    },
                                                                                    {
                                                                                        "type": "Literal",
                                                                                        "value": null,
                                                                                        "raw": "null"
                                                                                    },
                                                                                    {
                                                                                        "type": "Literal",
                                                                                        "value": 4,
                                                                                        "raw": "4"
                                                                                    }
                                                                                ]
                                                                            }
                                                                        },
                                                                        "right": {
                                                                            "type": "Literal",
                                                                            "value": "</pre>",
                                                                            "raw": "\"</pre>\""
                                                                        }
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "alternate": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "ReturnStatement",
                                                                    "argument": {
                                                                        "type": "Identifier",
                                                                        "name": "content"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            },
                                            "handler": {
                                                "type": "CatchClause",
                                                "param": {
                                                    "type": "Identifier",
                                                    "name": "e"
                                                },
                                                "body": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                        {
                                                            "type": "ReturnStatement",
                                                            "argument": {
                                                                "type": "Identifier",
                                                                "name": "content"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            "finalizer": null
                                        }
                                    ]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            {
                                "type": "FunctionDeclaration",
                                "id": {
                                    "type": "Identifier",
                                    "name": "autoScrollFn"
                                },
                                "params": [],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "IfStatement",
                                            "test": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                    "type": "ThisExpression"
                                                },
                                                "property": {
                                                    "type": "Identifier",
                                                    "name": "checked"
                                                }
                                            },
                                            "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                                "type": "Identifier",
                                                                "name": "autoScroll"
                                                            },
                                                            "right": {
                                                                "type": "Literal",
                                                                "value": true,
                                                                "raw": "true"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "Identifier",
                                                                "name": "scrollAutoLast"
                                                            },
                                                            "arguments": []
                                                        }
                                                    }
                                                ]
                                            },
                                            "alternate": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                                "type": "Identifier",
                                                                "name": "autoScroll"
                                                            },
                                                            "right": {
                                                                "type": "Literal",
                                                                "value": false,
                                                                "raw": "false"
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "window"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "localStorage"
                                                        }
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "setItem"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Literal",
                                                        "value": "autoScroll",
                                                        "raw": "\"autoScroll\""
                                                    },
                                                    {
                                                        "type": "Identifier",
                                                        "name": "autoScroll"
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            {
                                "type": "FunctionDeclaration",
                                "id": {
                                    "type": "Identifier",
                                    "name": "scrollAutoLast"
                                },
                                "params": [],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                                {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                        "type": "Identifier",
                                                        "name": "htmlMain"
                                                    },
                                                    "init": {
                                                        "type": "MemberExpression",
                                                        "computed": true,
                                                        "object": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "document"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "getElementsByTagName"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Literal",
                                                                    "value": "html",
                                                                    "raw": "\"html\""
                                                                }
                                                            ]
                                                        },
                                                        "property": {
                                                            "type": "Literal",
                                                            "value": 0,
                                                            "raw": "0"
                                                        }
                                                    }
                                                }
                                            ],
                                            "kind": "var"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "test": {
                                                "type": "Identifier",
                                                "name": "autoScroll"
                                            },
                                            "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "htmlMain"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "scrollLeft"
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "BinaryExpression",
                                                                "operator": "-",
                                                                "left": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "htmlMain"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "scrollWidth"
                                                                    }
                                                                },
                                                                "right": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "htmlMain"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "offsetWidth"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            "alternate": null
                                        }
                                    ]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            {
                                "type": "FunctionDeclaration",
                                "id": {
                                    "type": "Identifier",
                                    "name": "wordWrapFn"
                                },
                                "params": [],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                                {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                        "type": "Identifier",
                                                        "name": "m2Cells"
                                                    },
                                                    "init": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "document"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "getElementsByClassName"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Literal",
                                                                "value": "m2",
                                                                "raw": "\"m2\""
                                                            }
                                                        ]
                                                    }
                                                }
                                            ],
                                            "kind": "var"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "test": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                    "type": "ThisExpression"
                                                },
                                                "property": {
                                                    "type": "Identifier",
                                                    "name": "checked"
                                                }
                                            },
                                            "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                                "type": "Identifier",
                                                                "name": "isWordWrap"
                                                            },
                                                            "right": {
                                                                "type": "Literal",
                                                                "value": "wordWrap",
                                                                "raw": "\"wordWrap\""
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "type": "ForStatement",
                                                        "init": {
                                                            "type": "VariableDeclaration",
                                                            "declarations": [
                                                                {
                                                                    "type": "VariableDeclarator",
                                                                    "id": {
                                                                        "type": "Identifier",
                                                                        "name": "i"
                                                                    },
                                                                    "init": {
                                                                        "type": "Literal",
                                                                        "value": 0,
                                                                        "raw": "0"
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "var"
                                                        },
                                                        "test": {
                                                            "type": "BinaryExpression",
                                                            "operator": "<",
                                                            "left": {
                                                                "type": "Identifier",
                                                                "name": "i"
                                                            },
                                                            "right": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "m2Cells"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "length"
                                                                }
                                                            }
                                                        },
                                                        "update": {
                                                            "type": "UpdateExpression",
                                                            "operator": "++",
                                                            "argument": {
                                                                "type": "Identifier",
                                                                "name": "i"
                                                            },
                                                            "prefix": false
                                                        },
                                                        "body": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": true,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "m2Cells"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "i"
                                                                                    }
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "classList"
                                                                                }
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "add"
                                                                            }
                                                                        },
                                                                        "arguments": [
                                                                            {
                                                                                "type": "Literal",
                                                                                "value": "wordWrap",
                                                                                "raw": "\"wordWrap\""
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "=",
                                                                        "left": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "m2Cells"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "i"
                                                                                }
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "innerHTML"
                                                                            }
                                                                        },
                                                                        "right": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "Identifier",
                                                                                "name": "beautyContentWithPre"
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": true,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "m2Cells"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "i"
                                                                                        }
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "innerHTML"
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            },
                                            "alternate": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                                "type": "Identifier",
                                                                "name": "isWordWrap"
                                                            },
                                                            "right": {
                                                                "type": "Literal",
                                                                "value": "",
                                                                "raw": "\"\""
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "type": "ForStatement",
                                                        "init": {
                                                            "type": "VariableDeclaration",
                                                            "declarations": [
                                                                {
                                                                    "type": "VariableDeclarator",
                                                                    "id": {
                                                                        "type": "Identifier",
                                                                        "name": "i"
                                                                    },
                                                                    "init": {
                                                                        "type": "Literal",
                                                                        "value": 0,
                                                                        "raw": "0"
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "var"
                                                        },
                                                        "test": {
                                                            "type": "BinaryExpression",
                                                            "operator": "<",
                                                            "left": {
                                                                "type": "Identifier",
                                                                "name": "i"
                                                            },
                                                            "right": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "m2Cells"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "length"
                                                                }
                                                            }
                                                        },
                                                        "update": {
                                                            "type": "UpdateExpression",
                                                            "operator": "++",
                                                            "argument": {
                                                                "type": "Identifier",
                                                                "name": "i"
                                                            },
                                                            "prefix": false
                                                        },
                                                        "body": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": true,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "m2Cells"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "i"
                                                                                    }
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "classList"
                                                                                }
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "remove"
                                                                            }
                                                                        },
                                                                        "arguments": [
                                                                            {
                                                                                "type": "Literal",
                                                                                "value": "wordWrap",
                                                                                "raw": "\"wordWrap\""
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "=",
                                                                        "left": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "m2Cells"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "i"
                                                                                }
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "innerHTML"
                                                                            }
                                                                        },
                                                                        "right": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "Identifier",
                                                                                "name": "removePre"
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": true,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "m2Cells"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "i"
                                                                                        }
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "innerHTML"
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "window"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "localStorage"
                                                        }
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "setItem"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Literal",
                                                        "value": "isWordWrap",
                                                        "raw": "\"isWordWrap\""
                                                    },
                                                    {
                                                        "type": "Identifier",
                                                        "name": "isWordWrap"
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            {
                                "type": "FunctionDeclaration",
                                "id": {
                                    "type": "Identifier",
                                    "name": "scrollEventFn"
                                },
                                "params": [],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "document"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "getElementById"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Literal",
                                                                    "value": "__monitoringTextarea__",
                                                                    "raw": "\"__monitoringTextarea__\""
                                                                }
                                                            ]
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "style"
                                                        }
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "left"
                                                    }
                                                },
                                                "right": {
                                                    "type": "BinaryExpression",
                                                    "operator": "+",
                                                    "left": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "MemberExpression",
                                                            "computed": true,
                                                            "object": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "document"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "getElementsByTagName"
                                                                    }
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "Literal",
                                                                        "value": "html",
                                                                        "raw": "\"html\""
                                                                    }
                                                                ]
                                                            },
                                                            "property": {
                                                                "type": "Literal",
                                                                "value": 0,
                                                                "raw": "0"
                                                            }
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "scrollLeft"
                                                        }
                                                    },
                                                    "right": {
                                                        "type": "Literal",
                                                        "value": "px",
                                                        "raw": "\"px\""
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            {
                                "type": "FunctionDeclaration",
                                "id": {
                                    "type": "Identifier",
                                    "name": "removeRowFn"
                                },
                                "params": [],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "ThisExpression"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "parentElement"
                                                            }
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "style"
                                                        }
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "display"
                                                    }
                                                },
                                                "right": {
                                                    "type": "Literal",
                                                    "value": "none",
                                                    "raw": "\"none\""
                                                }
                                            }
                                        },
                                        {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                                {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                        "type": "Identifier",
                                                        "name": "k"
                                                    },
                                                    "init": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "ThisExpression"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "innerHTML"
                                                        }
                                                    }
                                                }
                                            ],
                                            "kind": "var"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "exceptList"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "push"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Identifier",
                                                        "name": "k"
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "window"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "localStorage"
                                                        }
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "setItem"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Literal",
                                                        "value": "exceptList",
                                                        "raw": "\"exceptList\""
                                                    },
                                                    {
                                                        "type": "Identifier",
                                                        "name": "exceptList"
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "Identifier",
                                                    "name": "makeExceptSpan"
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Identifier",
                                                        "name": "k"
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            {
                                "type": "FunctionDeclaration",
                                "id": {
                                    "type": "Identifier",
                                    "name": "makeExceptSpan"
                                },
                                "params": [
                                    {
                                        "type": "Identifier",
                                        "name": "k"
                                    }
                                ],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                                {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                        "type": "Identifier",
                                                        "name": "iDiv"
                                                    },
                                                    "init": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "document"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "createElement"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Literal",
                                                                "value": "span",
                                                                "raw": "\"span\""
                                                            }
                                                        ]
                                                    }
                                                }
                                            ],
                                            "kind": "var"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "iDiv"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "className"
                                                    }
                                                },
                                                "right": {
                                                    "type": "Literal",
                                                    "value": "exceptionItem po_copy",
                                                    "raw": "\"exceptionItem po_copy\""
                                                }
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "iDiv"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "innerHTML"
                                                    }
                                                },
                                                "right": {
                                                    "type": "Identifier",
                                                    "name": "k"
                                                }
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "iDiv"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "addEventListener"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Literal",
                                                        "value": "click",
                                                        "raw": "\"click\""
                                                    },
                                                    {
                                                        "type": "FunctionExpression",
                                                        "id": null,
                                                        "params": [],
                                                        "body": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "iDiv"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "parentElement"
                                                                                }
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "removeChild"
                                                                            }
                                                                        },
                                                                        "arguments": [
                                                                            {
                                                                                "type": "Identifier",
                                                                                "name": "iDiv"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "exceptList"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "splice"
                                                                            }
                                                                        },
                                                                        "arguments": [
                                                                            {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "exceptList"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "indexOf"
                                                                                    }
                                                                                },
                                                                                "arguments": [
                                                                                    {
                                                                                        "type": "Identifier",
                                                                                        "name": "k"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "Literal",
                                                                                "value": 1,
                                                                                "raw": "1"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "window"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "localStorage"
                                                                                }
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "setItem"
                                                                            }
                                                                        },
                                                                        "arguments": [
                                                                            {
                                                                                "type": "Literal",
                                                                                "value": "exceptList",
                                                                                "raw": "\"exceptList\""
                                                                            },
                                                                            {
                                                                                "type": "Identifier",
                                                                                "name": "exceptList"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "type": "TryStatement",
                                                                    "block": {
                                                                        "type": "BlockStatement",
                                                                        "body": [
                                                                            {
                                                                                "type": "ExpressionStatement",
                                                                                "expression": {
                                                                                    "type": "AssignmentExpression",
                                                                                    "operator": "=",
                                                                                    "left": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": false,
                                                                                            "object": {
                                                                                                "type": "CallExpression",
                                                                                                "callee": {
                                                                                                    "type": "MemberExpression",
                                                                                                    "computed": false,
                                                                                                    "object": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "document"
                                                                                                    },
                                                                                                    "property": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "getElementById"
                                                                                                    }
                                                                                                },
                                                                                                "arguments": [
                                                                                                    {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "k"
                                                                                                    }
                                                                                                ]
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Identifier",
                                                                                                "name": "style"
                                                                                            }
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "display"
                                                                                        }
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "Literal",
                                                                                        "value": "block",
                                                                                        "raw": "\"block\""
                                                                                    }
                                                                                }
                                                                            },
                                                                            {
                                                                                "type": "EmptyStatement"
                                                                            }
                                                                        ]
                                                                    },
                                                                    "handler": {
                                                                        "type": "CatchClause",
                                                                        "param": {
                                                                            "type": "Identifier",
                                                                            "name": "e"
                                                                        },
                                                                        "body": {
                                                                            "type": "BlockStatement",
                                                                            "body": [
                                                                                {
                                                                                    "type": "ExpressionStatement",
                                                                                    "expression": {
                                                                                        "type": "CallExpression",
                                                                                        "callee": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": false,
                                                                                            "object": {
                                                                                                "type": "Identifier",
                                                                                                "name": "console"
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Identifier",
                                                                                                "name": "log"
                                                                                            }
                                                                                        },
                                                                                        "arguments": [
                                                                                            {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": false,
                                                                                                "object": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "e"
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "message"
                                                                                                }
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    "finalizer": null
                                                                }
                                                            ]
                                                        },
                                                        "generator": false,
                                                        "expression": false,
                                                        "async": false
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "document"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "getElementById"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Literal",
                                                                "value": "exceptListSpan",
                                                                "raw": "\"exceptListSpan\""
                                                            }
                                                        ]
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "appendChild"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Identifier",
                                                        "name": "iDiv"
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            {
                                "type": "FunctionDeclaration",
                                "id": {
                                    "type": "Identifier",
                                    "name": "intervalChangeFn"
                                },
                                "params": [],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "intervalTime"
                                                },
                                                "right": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "ThisExpression"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "value"
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "window"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "localStorage"
                                                        }
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "setItem"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Literal",
                                                        "value": "intervalTime",
                                                        "raw": "\"intervalTime\""
                                                    },
                                                    {
                                                        "type": "Identifier",
                                                        "name": "intervalTime"
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "Identifier",
                                                    "name": "stopIntervalFn"
                                                },
                                                "arguments": []
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "Identifier",
                                                    "name": "startIntervalFn"
                                                },
                                                "arguments": []
                                            }
                                        }
                                    ]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            {
                                "type": "FunctionDeclaration",
                                "id": {
                                    "type": "Identifier",
                                    "name": "cellWidthChangeFn"
                                },
                                "params": [],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "M100"
                                                },
                                                "right": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "ThisExpression"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "value"
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "window"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "localStorage"
                                                        }
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "setItem"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Literal",
                                                        "value": "M100",
                                                        "raw": "\"M100\""
                                                    },
                                                    {
                                                        "type": "Identifier",
                                                        "name": "M100"
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                                {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                        "type": "Identifier",
                                                        "name": "m2Cells"
                                                    },
                                                    "init": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "document"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "getElementsByClassName"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Literal",
                                                                "value": "m2",
                                                                "raw": "\"m2\""
                                                            }
                                                        ]
                                                    }
                                                }
                                            ],
                                            "kind": "var"
                                        },
                                        {
                                            "type": "ForStatement",
                                            "init": {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "i"
                                                        },
                                                        "init": {
                                                            "type": "Literal",
                                                            "value": 0,
                                                            "raw": "0"
                                                        }
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            "test": {
                                                "type": "BinaryExpression",
                                                "operator": "<",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "i"
                                                },
                                                "right": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "m2Cells"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "length"
                                                    }
                                                }
                                            },
                                            "update": {
                                                "type": "UpdateExpression",
                                                "operator": "++",
                                                "argument": {
                                                    "type": "Identifier",
                                                    "name": "i"
                                                },
                                                "prefix": false
                                            },
                                            "body": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "m2Cells"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "i"
                                                                        }
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "classList"
                                                                    }
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "remove"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Literal",
                                                                    "value": "m20",
                                                                    "raw": "\"m20\""
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "m2Cells"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "i"
                                                                        }
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "classList"
                                                                    }
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "remove"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Literal",
                                                                    "value": "m50",
                                                                    "raw": "\"m50\""
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "m2Cells"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "i"
                                                                        }
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "classList"
                                                                    }
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "remove"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Literal",
                                                                    "value": "m100",
                                                                    "raw": "\"m100\""
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "m2Cells"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "i"
                                                                        }
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "classList"
                                                                    }
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "remove"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Literal",
                                                                    "value": "m200",
                                                                    "raw": "\"m200\""
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "m2Cells"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "i"
                                                                        }
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "classList"
                                                                    }
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "remove"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Literal",
                                                                    "value": "m300",
                                                                    "raw": "\"m300\""
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "m2Cells"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "i"
                                                                        }
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "classList"
                                                                    }
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "remove"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Literal",
                                                                    "value": "m400",
                                                                    "raw": "\"m400\""
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "m2Cells"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "i"
                                                                        }
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "classList"
                                                                    }
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "remove"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Literal",
                                                                    "value": "m500",
                                                                    "raw": "\"m500\""
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "m2Cells"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "i"
                                                                        }
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "classList"
                                                                    }
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "add"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "M100"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "Identifier",
                                                    "name": "windowWidthResize"
                                                },
                                                "arguments": []
                                            }
                                        }
                                    ]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            {
                                "type": "FunctionDeclaration",
                                "id": {
                                    "type": "Identifier",
                                    "name": "windowWidthResize"
                                },
                                "params": [],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "document"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "getElementById"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Literal",
                                                                    "value": "__monitoringResult__",
                                                                    "raw": "\"__monitoringResult__\""
                                                                }
                                                            ]
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "style"
                                                        }
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "width"
                                                    }
                                                },
                                                "right": {
                                                    "type": "BinaryExpression",
                                                    "operator": "+",
                                                    "left": {
                                                        "type": "BinaryExpression",
                                                        "operator": "+",
                                                        "left": {
                                                            "type": "BinaryExpression",
                                                            "operator": "*",
                                                            "left": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "Identifier",
                                                                    "name": "Number"
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "M100"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "replace"
                                                                            }
                                                                        },
                                                                        "arguments": [
                                                                            {
                                                                                "type": "Literal",
                                                                                "value": "m",
                                                                                "raw": "\"m\""
                                                                            },
                                                                            {
                                                                                "type": "Literal",
                                                                                "value": "",
                                                                                "raw": "\"\""
                                                                            }
                                                                        ]
                                                                    }
                                                                ]
                                                            },
                                                            "right": {
                                                                "type": "BinaryExpression",
                                                                "operator": "-",
                                                                "left": {
                                                                    "type": "Identifier",
                                                                    "name": "colCount"
                                                                },
                                                                "right": {
                                                                    "type": "Literal",
                                                                    "value": 1,
                                                                    "raw": "1"
                                                                }
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "Literal",
                                                            "value": 400,
                                                            "raw": "400"
                                                        }
                                                    },
                                                    "right": {
                                                        "type": "Literal",
                                                        "value": "px",
                                                        "raw": "\"px\""
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            {
                                "type": "FunctionDeclaration",
                                "id": {
                                    "type": "Identifier",
                                    "name": "diffFn"
                                },
                                "params": [],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "TryStatement",
                                            "block": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "VariableDeclaration",
                                                        "declarations": [
                                                            {
                                                                "type": "VariableDeclarator",
                                                                "id": {
                                                                    "type": "Identifier",
                                                                    "name": "arr"
                                                                },
                                                                "init": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "document"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "getElementsByClassName"
                                                                        }
                                                                    },
                                                                    "arguments": [
                                                                        {
                                                                            "type": "Literal",
                                                                            "value": "m2",
                                                                            "raw": "\"m2\""
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        ],
                                                        "kind": "var"
                                                    },
                                                    {
                                                        "type": "VariableDeclaration",
                                                        "declarations": [
                                                            {
                                                                "type": "VariableDeclarator",
                                                                "id": {
                                                                    "type": "Identifier",
                                                                    "name": "selectedEle"
                                                                },
                                                                "init": {
                                                                    "type": "ArrayExpression",
                                                                    "elements": []
                                                                }
                                                            }
                                                        ],
                                                        "kind": "var"
                                                    },
                                                    {
                                                        "type": "ForStatement",
                                                        "init": {
                                                            "type": "VariableDeclaration",
                                                            "declarations": [
                                                                {
                                                                    "type": "VariableDeclarator",
                                                                    "id": {
                                                                        "type": "Identifier",
                                                                        "name": "i"
                                                                    },
                                                                    "init": {
                                                                        "type": "Literal",
                                                                        "value": 0,
                                                                        "raw": "0"
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "var"
                                                        },
                                                        "test": {
                                                            "type": "BinaryExpression",
                                                            "operator": "<",
                                                            "left": {
                                                                "type": "Identifier",
                                                                "name": "i"
                                                            },
                                                            "right": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "arr"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "length"
                                                                }
                                                            }
                                                        },
                                                        "update": {
                                                            "type": "UpdateExpression",
                                                            "operator": "++",
                                                            "argument": {
                                                                "type": "Identifier",
                                                                "name": "i"
                                                            },
                                                            "prefix": false
                                                        },
                                                        "body": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "IfStatement",
                                                                    "test": {
                                                                        "type": "BinaryExpression",
                                                                        "operator": "===",
                                                                        "left": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "Identifier",
                                                                                "name": "Number"
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "CallExpression",
                                                                                    "callee": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": true,
                                                                                            "object": {
                                                                                                "type": "Identifier",
                                                                                                "name": "arr"
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Identifier",
                                                                                                "name": "i"
                                                                                            }
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "getAttribute"
                                                                                        }
                                                                                    },
                                                                                    "arguments": [
                                                                                        {
                                                                                            "type": "Literal",
                                                                                            "value": "idx",
                                                                                            "raw": "\"idx\""
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        "right": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "tickerArr"
                                                                            },
                                                                            "property": {
                                                                                "type": "Literal",
                                                                                "value": 0,
                                                                                "raw": "0"
                                                                            }
                                                                        }
                                                                    },
                                                                    "consequent": {
                                                                        "type": "BlockStatement",
                                                                        "body": [
                                                                            {
                                                                                "type": "ExpressionStatement",
                                                                                "expression": {
                                                                                    "type": "AssignmentExpression",
                                                                                    "operator": "=",
                                                                                    "left": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": true,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "selectedEle"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Literal",
                                                                                            "value": 0,
                                                                                            "raw": "0"
                                                                                        }
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": true,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "arr"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "i"
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    "alternate": null
                                                                },
                                                                {
                                                                    "type": "IfStatement",
                                                                    "test": {
                                                                        "type": "BinaryExpression",
                                                                        "operator": "===",
                                                                        "left": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "Identifier",
                                                                                "name": "Number"
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "CallExpression",
                                                                                    "callee": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": true,
                                                                                            "object": {
                                                                                                "type": "Identifier",
                                                                                                "name": "arr"
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Identifier",
                                                                                                "name": "i"
                                                                                            }
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "getAttribute"
                                                                                        }
                                                                                    },
                                                                                    "arguments": [
                                                                                        {
                                                                                            "type": "Literal",
                                                                                            "value": "idx",
                                                                                            "raw": "\"idx\""
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        "right": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "tickerArr"
                                                                            },
                                                                            "property": {
                                                                                "type": "Literal",
                                                                                "value": 1,
                                                                                "raw": "1"
                                                                            }
                                                                        }
                                                                    },
                                                                    "consequent": {
                                                                        "type": "BlockStatement",
                                                                        "body": [
                                                                            {
                                                                                "type": "ExpressionStatement",
                                                                                "expression": {
                                                                                    "type": "AssignmentExpression",
                                                                                    "operator": "=",
                                                                                    "left": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": true,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "selectedEle"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Literal",
                                                                                            "value": 1,
                                                                                            "raw": "1"
                                                                                        }
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": true,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "arr"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "i"
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    "alternate": null
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "IfStatement",
                                                        "test": {
                                                            "type": "LogicalExpression",
                                                            "operator": "||",
                                                            "left": {
                                                                "type": "UnaryExpression",
                                                                "operator": "!",
                                                                "argument": {
                                                                    "type": "MemberExpression",
                                                                    "computed": true,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "selectedEle"
                                                                    },
                                                                    "property": {
                                                                        "type": "Literal",
                                                                        "value": 0,
                                                                        "raw": "0"
                                                                    }
                                                                },
                                                                "prefix": true
                                                            },
                                                            "right": {
                                                                "type": "UnaryExpression",
                                                                "operator": "!",
                                                                "argument": {
                                                                    "type": "MemberExpression",
                                                                    "computed": true,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "selectedEle"
                                                                    },
                                                                    "property": {
                                                                        "type": "Literal",
                                                                        "value": 1,
                                                                        "raw": "1"
                                                                    }
                                                                },
                                                                "prefix": true
                                                            }
                                                        },
                                                        "consequent": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                            "type": "Identifier",
                                                                            "name": "c2"
                                                                        },
                                                                        "arguments": [
                                                                            {
                                                                                "type": "Literal",
                                                                                "value": "firstE or secondE is undefined.",
                                                                                "raw": "\"firstE or secondE is undefined.\""
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "console"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "log"
                                                                            }
                                                                        },
                                                                        "arguments": [
                                                                            {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "selectedEle"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Literal",
                                                                                    "value": 0,
                                                                                    "raw": "0"
                                                                                }
                                                                            },
                                                                            {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "selectedEle"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Literal",
                                                                                    "value": 1,
                                                                                    "raw": "1"
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ReturnStatement",
                                                                    "argument": null
                                                                }
                                                            ]
                                                        },
                                                        "alternate": null
                                                    },
                                                    {
                                                        "type": "VariableDeclaration",
                                                        "declarations": [
                                                            {
                                                                "type": "VariableDeclarator",
                                                                "id": {
                                                                    "type": "Identifier",
                                                                    "name": "innerHtmlsWithoutPre"
                                                                },
                                                                "init": {
                                                                    "type": "ArrayExpression",
                                                                    "elements": []
                                                                }
                                                            }
                                                        ],
                                                        "kind": "var"
                                                    },
                                                    {
                                                        "type": "VariableDeclaration",
                                                        "declarations": [
                                                            {
                                                                "type": "VariableDeclarator",
                                                                "id": {
                                                                    "type": "Identifier",
                                                                    "name": "objs"
                                                                },
                                                                "init": {
                                                                    "type": "ArrayExpression",
                                                                    "elements": []
                                                                }
                                                            }
                                                        ],
                                                        "kind": "var"
                                                    },
                                                    {
                                                        "type": "ForStatement",
                                                        "init": {
                                                            "type": "VariableDeclaration",
                                                            "declarations": [
                                                                {
                                                                    "type": "VariableDeclarator",
                                                                    "id": {
                                                                        "type": "Identifier",
                                                                        "name": "i"
                                                                    },
                                                                    "init": {
                                                                        "type": "Literal",
                                                                        "value": 0,
                                                                        "raw": "0"
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "var"
                                                        },
                                                        "test": {
                                                            "type": "BinaryExpression",
                                                            "operator": "<",
                                                            "left": {
                                                                "type": "Identifier",
                                                                "name": "i"
                                                            },
                                                            "right": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "selectedEle"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "length"
                                                                }
                                                            }
                                                        },
                                                        "update": {
                                                            "type": "UpdateExpression",
                                                            "operator": "++",
                                                            "argument": {
                                                                "type": "Identifier",
                                                                "name": "i"
                                                            },
                                                            "prefix": false
                                                        },
                                                        "body": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "VariableDeclaration",
                                                                    "declarations": [
                                                                        {
                                                                            "type": "VariableDeclarator",
                                                                            "id": {
                                                                                "type": "Identifier",
                                                                                "name": "v"
                                                                            },
                                                                            "init": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": true,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "selectedEle"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "i"
                                                                                    }
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "innerHTML"
                                                                                }
                                                                            }
                                                                        }
                                                                    ],
                                                                    "kind": "var"
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "=",
                                                                        "left": {
                                                                            "type": "Identifier",
                                                                            "name": "v"
                                                                        },
                                                                        "right": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "Identifier",
                                                                                "name": "removePre"
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "v"
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "=",
                                                                        "left": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "innerHtmlsWithoutPre"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "i"
                                                                            }
                                                                        },
                                                                        "right": {
                                                                            "type": "Identifier",
                                                                            "name": "v"
                                                                        }
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "=",
                                                                        "left": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "objs"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "i"
                                                                            }
                                                                        },
                                                                        "right": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "JSON"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "parse"
                                                                                }
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "v"
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "console"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "log"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "objs"
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "IfStatement",
                                                        "test": {
                                                            "type": "LogicalExpression",
                                                            "operator": "||",
                                                            "left": {
                                                                "type": "BinaryExpression",
                                                                "operator": "!==",
                                                                "left": {
                                                                    "type": "UnaryExpression",
                                                                    "operator": "typeof",
                                                                    "argument": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "objs"
                                                                        },
                                                                        "property": {
                                                                            "type": "Literal",
                                                                            "value": 0,
                                                                            "raw": "0"
                                                                        }
                                                                    },
                                                                    "prefix": true
                                                                },
                                                                "right": {
                                                                    "type": "Literal",
                                                                    "value": "object",
                                                                    "raw": "\"object\""
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "BinaryExpression",
                                                                "operator": "!==",
                                                                "left": {
                                                                    "type": "UnaryExpression",
                                                                    "operator": "typeof",
                                                                    "argument": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "objs"
                                                                        },
                                                                        "property": {
                                                                            "type": "Literal",
                                                                            "value": 1,
                                                                            "raw": "1"
                                                                        }
                                                                    },
                                                                    "prefix": true
                                                                },
                                                                "right": {
                                                                    "type": "Literal",
                                                                    "value": "object",
                                                                    "raw": "\"object\""
                                                                }
                                                            }
                                                        },
                                                        "consequent": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                            "type": "Identifier",
                                                                            "name": "c2"
                                                                        },
                                                                        "arguments": [
                                                                            {
                                                                                "type": "Literal",
                                                                                "value": "objs is not Object.",
                                                                                "raw": "\"objs is not Object.\""
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "console"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "log"
                                                                            }
                                                                        },
                                                                        "arguments": [
                                                                            {
                                                                                "type": "Literal",
                                                                                "value": "objs is not Object.",
                                                                                "raw": "\"objs is not Object.\""
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ReturnStatement",
                                                                    "argument": null
                                                                }
                                                            ]
                                                        },
                                                        "alternate": null
                                                    },
                                                    {
                                                        "type": "IfStatement",
                                                        "test": {
                                                            "type": "LogicalExpression",
                                                            "operator": "||",
                                                            "left": {
                                                                "type": "BinaryExpression",
                                                                "operator": "instanceof",
                                                                "left": {
                                                                    "type": "MemberExpression",
                                                                    "computed": true,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "objs"
                                                                    },
                                                                    "property": {
                                                                        "type": "Literal",
                                                                        "value": 0,
                                                                        "raw": "0"
                                                                    }
                                                                },
                                                                "right": {
                                                                    "type": "Identifier",
                                                                    "name": "Array"
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "BinaryExpression",
                                                                "operator": "instanceof",
                                                                "left": {
                                                                    "type": "MemberExpression",
                                                                    "computed": true,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "objs"
                                                                    },
                                                                    "property": {
                                                                        "type": "Literal",
                                                                        "value": 1,
                                                                        "raw": "1"
                                                                    }
                                                                },
                                                                "right": {
                                                                    "type": "Identifier",
                                                                    "name": "Array"
                                                                }
                                                            }
                                                        },
                                                        "consequent": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                            "type": "Identifier",
                                                                            "name": "c2"
                                                                        },
                                                                        "arguments": [
                                                                            {
                                                                                "type": "Literal",
                                                                                "value": "objs is Array. diff ignore...",
                                                                                "raw": "\"objs is Array. diff ignore...\""
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "console"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "log"
                                                                            }
                                                                        },
                                                                        "arguments": [
                                                                            {
                                                                                "type": "Literal",
                                                                                "value": "objs is Array. diff ignore...",
                                                                                "raw": "\"objs is Array. diff ignore...\""
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ReturnStatement",
                                                                    "argument": null
                                                                }
                                                            ]
                                                        },
                                                        "alternate": null
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "console"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "log"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "objs"
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "VariableDeclaration",
                                                        "declarations": [
                                                            {
                                                                "type": "VariableDeclarator",
                                                                "id": {
                                                                    "type": "Identifier",
                                                                    "name": "diff_new"
                                                                },
                                                                "init": {
                                                                    "type": "ArrayExpression",
                                                                    "elements": []
                                                                }
                                                            }
                                                        ],
                                                        "kind": "var"
                                                    },
                                                    {
                                                        "type": "VariableDeclaration",
                                                        "declarations": [
                                                            {
                                                                "type": "VariableDeclarator",
                                                                "id": {
                                                                    "type": "Identifier",
                                                                    "name": "diff_delete"
                                                                },
                                                                "init": {
                                                                    "type": "ArrayExpression",
                                                                    "elements": []
                                                                }
                                                            }
                                                        ],
                                                        "kind": "var"
                                                    },
                                                    {
                                                        "type": "VariableDeclaration",
                                                        "declarations": [
                                                            {
                                                                "type": "VariableDeclarator",
                                                                "id": {
                                                                    "type": "Identifier",
                                                                    "name": "diff_change"
                                                                },
                                                                "init": {
                                                                    "type": "ArrayExpression",
                                                                    "elements": []
                                                                }
                                                            }
                                                        ],
                                                        "kind": "var"
                                                    },
                                                    {
                                                        "type": "VariableDeclaration",
                                                        "declarations": [
                                                            {
                                                                "type": "VariableDeclarator",
                                                                "id": {
                                                                    "type": "Identifier",
                                                                    "name": "firstKeyArr"
                                                                },
                                                                "init": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "Object"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "keys"
                                                                        }
                                                                    },
                                                                    "arguments": [
                                                                        {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "objs"
                                                                            },
                                                                            "property": {
                                                                                "type": "Literal",
                                                                                "value": 0,
                                                                                "raw": "0"
                                                                            }
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        ],
                                                        "kind": "var"
                                                    },
                                                    {
                                                        "type": "VariableDeclaration",
                                                        "declarations": [
                                                            {
                                                                "type": "VariableDeclarator",
                                                                "id": {
                                                                    "type": "Identifier",
                                                                    "name": "secondKeyArr"
                                                                },
                                                                "init": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "Object"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "keys"
                                                                        }
                                                                    },
                                                                    "arguments": [
                                                                        {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "objs"
                                                                            },
                                                                            "property": {
                                                                                "type": "Literal",
                                                                                "value": 1,
                                                                                "raw": "1"
                                                                            }
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        ],
                                                        "kind": "var"
                                                    },
                                                    {
                                                        "type": "ForInStatement",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "k"
                                                        },
                                                        "right": {
                                                            "type": "MemberExpression",
                                                            "computed": true,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "objs"
                                                            },
                                                            "property": {
                                                                "type": "Literal",
                                                                "value": 1,
                                                                "raw": "1"
                                                            }
                                                        },
                                                        "body": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "IfStatement",
                                                                    "test": {
                                                                        "type": "BinaryExpression",
                                                                        "operator": "!==",
                                                                        "left": {
                                                                            "type": "UnaryExpression",
                                                                            "operator": "typeof",
                                                                            "argument": {
                                                                                "type": "Identifier",
                                                                                "name": "k"
                                                                            },
                                                                            "prefix": true
                                                                        },
                                                                        "right": {
                                                                            "type": "Literal",
                                                                            "value": "string",
                                                                            "raw": "\"string\""
                                                                        }
                                                                    },
                                                                    "consequent": {
                                                                        "type": "BlockStatement",
                                                                        "body": [
                                                                            {
                                                                                "type": "ExpressionStatement",
                                                                                "expression": {
                                                                                    "type": "CallExpression",
                                                                                    "callee": {
                                                                                        "type": "Identifier",
                                                                                        "name": "c"
                                                                                    },
                                                                                    "arguments": [
                                                                                        {
                                                                                            "type": "BinaryExpression",
                                                                                            "operator": "+",
                                                                                            "left": {
                                                                                                "type": "Identifier",
                                                                                                "name": "k"
                                                                                            },
                                                                                            "right": {
                                                                                                "type": "Literal",
                                                                                                "value": " is not a string key.",
                                                                                                "raw": "\" is not a string key.\""
                                                                                            }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            },
                                                                            {
                                                                                "type": "ContinueStatement",
                                                                                "label": null
                                                                            }
                                                                        ]
                                                                    },
                                                                    "alternate": null
                                                                },
                                                                {
                                                                    "type": "IfStatement",
                                                                    "test": {
                                                                        "type": "BinaryExpression",
                                                                        "operator": "===",
                                                                        "left": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "firstKeyArr"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "indexOf"
                                                                                }
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "k"
                                                                                }
                                                                            ]
                                                                        },
                                                                        "right": {
                                                                            "type": "UnaryExpression",
                                                                            "operator": "-",
                                                                            "argument": {
                                                                                "type": "Literal",
                                                                                "value": 1,
                                                                                "raw": "1"
                                                                            },
                                                                            "prefix": true
                                                                        }
                                                                    },
                                                                    "consequent": {
                                                                        "type": "BlockStatement",
                                                                        "body": [
                                                                            {
                                                                                "type": "ExpressionStatement",
                                                                                "expression": {
                                                                                    "type": "CallExpression",
                                                                                    "callee": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "diff_new"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "push"
                                                                                        }
                                                                                    },
                                                                                    "arguments": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "k"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    "alternate": {
                                                                        "type": "BlockStatement",
                                                                        "body": [
                                                                            {
                                                                                "type": "VariableDeclaration",
                                                                                "declarations": [
                                                                                    {
                                                                                        "type": "VariableDeclarator",
                                                                                        "id": {
                                                                                            "type": "Identifier",
                                                                                            "name": "pStr"
                                                                                        },
                                                                                        "init": {
                                                                                            "type": "CallExpression",
                                                                                            "callee": {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": false,
                                                                                                "object": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "JSON"
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "stringify"
                                                                                                }
                                                                                            },
                                                                                            "arguments": [
                                                                                                {
                                                                                                    "type": "MemberExpression",
                                                                                                    "computed": true,
                                                                                                    "object": {
                                                                                                        "type": "MemberExpression",
                                                                                                        "computed": true,
                                                                                                        "object": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "objs"
                                                                                                        },
                                                                                                        "property": {
                                                                                                            "type": "Literal",
                                                                                                            "value": 0,
                                                                                                            "raw": "0"
                                                                                                        }
                                                                                                    },
                                                                                                    "property": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "k"
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    }
                                                                                ],
                                                                                "kind": "var"
                                                                            },
                                                                            {
                                                                                "type": "VariableDeclaration",
                                                                                "declarations": [
                                                                                    {
                                                                                        "type": "VariableDeclarator",
                                                                                        "id": {
                                                                                            "type": "Identifier",
                                                                                            "name": "tStr"
                                                                                        },
                                                                                        "init": {
                                                                                            "type": "CallExpression",
                                                                                            "callee": {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": false,
                                                                                                "object": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "JSON"
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "stringify"
                                                                                                }
                                                                                            },
                                                                                            "arguments": [
                                                                                                {
                                                                                                    "type": "MemberExpression",
                                                                                                    "computed": true,
                                                                                                    "object": {
                                                                                                        "type": "MemberExpression",
                                                                                                        "computed": true,
                                                                                                        "object": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "objs"
                                                                                                        },
                                                                                                        "property": {
                                                                                                            "type": "Literal",
                                                                                                            "value": 1,
                                                                                                            "raw": "1"
                                                                                                        }
                                                                                                    },
                                                                                                    "property": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "k"
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    }
                                                                                ],
                                                                                "kind": "var"
                                                                            },
                                                                            {
                                                                                "type": "IfStatement",
                                                                                "test": {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "===",
                                                                                    "left": {
                                                                                        "type": "Identifier",
                                                                                        "name": "pStr"
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "Identifier",
                                                                                        "name": "tStr"
                                                                                    }
                                                                                },
                                                                                "consequent": {
                                                                                    "type": "BlockStatement",
                                                                                    "body": []
                                                                                },
                                                                                "alternate": {
                                                                                    "type": "BlockStatement",
                                                                                    "body": [
                                                                                        {
                                                                                            "type": "ExpressionStatement",
                                                                                            "expression": {
                                                                                                "type": "CallExpression",
                                                                                                "callee": {
                                                                                                    "type": "MemberExpression",
                                                                                                    "computed": false,
                                                                                                    "object": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "diff_change"
                                                                                                    },
                                                                                                    "property": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "push"
                                                                                                    }
                                                                                                },
                                                                                                "arguments": [
                                                                                                    {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "k"
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "each": false
                                                    },
                                                    {
                                                        "type": "ForInStatement",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "k"
                                                        },
                                                        "right": {
                                                            "type": "MemberExpression",
                                                            "computed": true,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "objs"
                                                            },
                                                            "property": {
                                                                "type": "Literal",
                                                                "value": 0,
                                                                "raw": "0"
                                                            }
                                                        },
                                                        "body": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "IfStatement",
                                                                    "test": {
                                                                        "type": "BinaryExpression",
                                                                        "operator": "!==",
                                                                        "left": {
                                                                            "type": "UnaryExpression",
                                                                            "operator": "typeof",
                                                                            "argument": {
                                                                                "type": "Identifier",
                                                                                "name": "k"
                                                                            },
                                                                            "prefix": true
                                                                        },
                                                                        "right": {
                                                                            "type": "Literal",
                                                                            "value": "string",
                                                                            "raw": "\"string\""
                                                                        }
                                                                    },
                                                                    "consequent": {
                                                                        "type": "BlockStatement",
                                                                        "body": [
                                                                            {
                                                                                "type": "ExpressionStatement",
                                                                                "expression": {
                                                                                    "type": "CallExpression",
                                                                                    "callee": {
                                                                                        "type": "Identifier",
                                                                                        "name": "c"
                                                                                    },
                                                                                    "arguments": [
                                                                                        {
                                                                                            "type": "BinaryExpression",
                                                                                            "operator": "+",
                                                                                            "left": {
                                                                                                "type": "Identifier",
                                                                                                "name": "k"
                                                                                            },
                                                                                            "right": {
                                                                                                "type": "Literal",
                                                                                                "value": " is not a string key.",
                                                                                                "raw": "\" is not a string key.\""
                                                                                            }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            },
                                                                            {
                                                                                "type": "ContinueStatement",
                                                                                "label": null
                                                                            }
                                                                        ]
                                                                    },
                                                                    "alternate": null
                                                                },
                                                                {
                                                                    "type": "IfStatement",
                                                                    "test": {
                                                                        "type": "BinaryExpression",
                                                                        "operator": "===",
                                                                        "left": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "secondKeyArr"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "indexOf"
                                                                                }
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "k"
                                                                                }
                                                                            ]
                                                                        },
                                                                        "right": {
                                                                            "type": "UnaryExpression",
                                                                            "operator": "-",
                                                                            "argument": {
                                                                                "type": "Literal",
                                                                                "value": 1,
                                                                                "raw": "1"
                                                                            },
                                                                            "prefix": true
                                                                        }
                                                                    },
                                                                    "consequent": {
                                                                        "type": "BlockStatement",
                                                                        "body": [
                                                                            {
                                                                                "type": "ExpressionStatement",
                                                                                "expression": {
                                                                                    "type": "CallExpression",
                                                                                    "callee": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "diff_delete"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "push"
                                                                                        }
                                                                                    },
                                                                                    "arguments": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "k"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    "alternate": null
                                                                }
                                                            ]
                                                        },
                                                        "each": false
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "Identifier",
                                                                "name": "c2"
                                                            },
                                                            "arguments": []
                                                        }
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "Identifier",
                                                                "name": "c2"
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "+",
                                                                    "left": {
                                                                        "type": "Literal",
                                                                        "value": "new key=",
                                                                        "raw": "\"new key=\""
                                                                    },
                                                                    "right": {
                                                                        "type": "Identifier",
                                                                        "name": "diff_new"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "Identifier",
                                                                "name": "c2"
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "+",
                                                                    "left": {
                                                                        "type": "Literal",
                                                                        "value": "changed key=",
                                                                        "raw": "\"changed key=\""
                                                                    },
                                                                    "right": {
                                                                        "type": "Identifier",
                                                                        "name": "diff_change"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "Identifier",
                                                                "name": "c2"
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "+",
                                                                    "left": {
                                                                        "type": "Literal",
                                                                        "value": "deleted key=",
                                                                        "raw": "\"deleted key=\""
                                                                    },
                                                                    "right": {
                                                                        "type": "Identifier",
                                                                        "name": "diff_delete"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "ForStatement",
                                                        "init": {
                                                            "type": "VariableDeclaration",
                                                            "declarations": [
                                                                {
                                                                    "type": "VariableDeclarator",
                                                                    "id": {
                                                                        "type": "Identifier",
                                                                        "name": "i"
                                                                    },
                                                                    "init": {
                                                                        "type": "Literal",
                                                                        "value": 0,
                                                                        "raw": "0"
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "var"
                                                        },
                                                        "test": {
                                                            "type": "BinaryExpression",
                                                            "operator": "<",
                                                            "left": {
                                                                "type": "Identifier",
                                                                "name": "i"
                                                            },
                                                            "right": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "diff_new"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "length"
                                                                }
                                                            }
                                                        },
                                                        "update": {
                                                            "type": "UpdateExpression",
                                                            "operator": "++",
                                                            "argument": {
                                                                "type": "Identifier",
                                                                "name": "i"
                                                            },
                                                            "prefix": false
                                                        },
                                                        "body": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "=",
                                                                        "left": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "objs"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Literal",
                                                                                    "value": 1,
                                                                                    "raw": "1"
                                                                                }
                                                                            },
                                                                            "property": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "+",
                                                                                "left": {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "+",
                                                                                    "left": {
                                                                                        "type": "Literal",
                                                                                        "value": "<span class='ht1'>",
                                                                                        "raw": "'<span class=\\'ht1\\'>'"
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": true,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "diff_new"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "i"
                                                                                        }
                                                                                    }
                                                                                },
                                                                                "right": {
                                                                                    "type": "Literal",
                                                                                    "value": "</span>",
                                                                                    "raw": "'</span>'"
                                                                                }
                                                                            }
                                                                        },
                                                                        "right": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "objs"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Literal",
                                                                                    "value": 1,
                                                                                    "raw": "1"
                                                                                }
                                                                            },
                                                                            "property": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "diff_new"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "i"
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "UnaryExpression",
                                                                        "operator": "delete",
                                                                        "argument": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "objs"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Literal",
                                                                                    "value": 1,
                                                                                    "raw": "1"
                                                                                }
                                                                            },
                                                                            "property": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "diff_new"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "i"
                                                                                }
                                                                            }
                                                                        },
                                                                        "prefix": true
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "ForStatement",
                                                        "init": {
                                                            "type": "VariableDeclaration",
                                                            "declarations": [
                                                                {
                                                                    "type": "VariableDeclarator",
                                                                    "id": {
                                                                        "type": "Identifier",
                                                                        "name": "i"
                                                                    },
                                                                    "init": {
                                                                        "type": "Literal",
                                                                        "value": 0,
                                                                        "raw": "0"
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "var"
                                                        },
                                                        "test": {
                                                            "type": "BinaryExpression",
                                                            "operator": "<",
                                                            "left": {
                                                                "type": "Identifier",
                                                                "name": "i"
                                                            },
                                                            "right": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "diff_change"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "length"
                                                                }
                                                            }
                                                        },
                                                        "update": {
                                                            "type": "UpdateExpression",
                                                            "operator": "++",
                                                            "argument": {
                                                                "type": "Identifier",
                                                                "name": "i"
                                                            },
                                                            "prefix": false
                                                        },
                                                        "body": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "=",
                                                                        "left": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "objs"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Literal",
                                                                                    "value": 0,
                                                                                    "raw": "0"
                                                                                }
                                                                            },
                                                                            "property": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "+",
                                                                                "left": {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "+",
                                                                                    "left": {
                                                                                        "type": "Literal",
                                                                                        "value": "<span class='ht2'>",
                                                                                        "raw": "'<span class=\\'ht2\\'>'"
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": true,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "diff_change"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "i"
                                                                                        }
                                                                                    }
                                                                                },
                                                                                "right": {
                                                                                    "type": "Literal",
                                                                                    "value": "</span>",
                                                                                    "raw": "'</span>'"
                                                                                }
                                                                            }
                                                                        },
                                                                        "right": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "objs"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Literal",
                                                                                    "value": 0,
                                                                                    "raw": "0"
                                                                                }
                                                                            },
                                                                            "property": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "diff_change"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "i"
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "UnaryExpression",
                                                                        "operator": "delete",
                                                                        "argument": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "objs"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Literal",
                                                                                    "value": 0,
                                                                                    "raw": "0"
                                                                                }
                                                                            },
                                                                            "property": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "diff_change"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "i"
                                                                                }
                                                                            }
                                                                        },
                                                                        "prefix": true
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "=",
                                                                        "left": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "objs"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Literal",
                                                                                    "value": 1,
                                                                                    "raw": "1"
                                                                                }
                                                                            },
                                                                            "property": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "+",
                                                                                "left": {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "+",
                                                                                    "left": {
                                                                                        "type": "Literal",
                                                                                        "value": "<span class='ht2'>",
                                                                                        "raw": "'<span class=\\'ht2\\'>'"
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": true,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "diff_change"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "i"
                                                                                        }
                                                                                    }
                                                                                },
                                                                                "right": {
                                                                                    "type": "Literal",
                                                                                    "value": "</span>",
                                                                                    "raw": "'</span>'"
                                                                                }
                                                                            }
                                                                        },
                                                                        "right": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "objs"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Literal",
                                                                                    "value": 1,
                                                                                    "raw": "1"
                                                                                }
                                                                            },
                                                                            "property": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "diff_change"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "i"
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "UnaryExpression",
                                                                        "operator": "delete",
                                                                        "argument": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "objs"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Literal",
                                                                                    "value": 1,
                                                                                    "raw": "1"
                                                                                }
                                                                            },
                                                                            "property": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "diff_change"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "i"
                                                                                }
                                                                            }
                                                                        },
                                                                        "prefix": true
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "ForStatement",
                                                        "init": {
                                                            "type": "VariableDeclaration",
                                                            "declarations": [
                                                                {
                                                                    "type": "VariableDeclarator",
                                                                    "id": {
                                                                        "type": "Identifier",
                                                                        "name": "i"
                                                                    },
                                                                    "init": {
                                                                        "type": "Literal",
                                                                        "value": 0,
                                                                        "raw": "0"
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "var"
                                                        },
                                                        "test": {
                                                            "type": "BinaryExpression",
                                                            "operator": "<",
                                                            "left": {
                                                                "type": "Identifier",
                                                                "name": "i"
                                                            },
                                                            "right": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "diff_delete"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "length"
                                                                }
                                                            }
                                                        },
                                                        "update": {
                                                            "type": "UpdateExpression",
                                                            "operator": "++",
                                                            "argument": {
                                                                "type": "Identifier",
                                                                "name": "i"
                                                            },
                                                            "prefix": false
                                                        },
                                                        "body": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "=",
                                                                        "left": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "objs"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Literal",
                                                                                    "value": 0,
                                                                                    "raw": "0"
                                                                                }
                                                                            },
                                                                            "property": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "+",
                                                                                "left": {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "+",
                                                                                    "left": {
                                                                                        "type": "Literal",
                                                                                        "value": "<span class='ht1'>",
                                                                                        "raw": "'<span class=\\'ht1\\'>'"
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": true,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "diff_delete"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "i"
                                                                                        }
                                                                                    }
                                                                                },
                                                                                "right": {
                                                                                    "type": "Literal",
                                                                                    "value": "</span>",
                                                                                    "raw": "'</span>'"
                                                                                }
                                                                            }
                                                                        },
                                                                        "right": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "objs"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Literal",
                                                                                    "value": 0,
                                                                                    "raw": "0"
                                                                                }
                                                                            },
                                                                            "property": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "diff_delete"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "i"
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "UnaryExpression",
                                                                        "operator": "delete",
                                                                        "argument": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "objs"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Literal",
                                                                                    "value": 0,
                                                                                    "raw": "0"
                                                                                }
                                                                            },
                                                                            "property": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "diff_delete"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "i"
                                                                                }
                                                                            }
                                                                        },
                                                                        "prefix": true
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "MemberExpression",
                                                                    "computed": true,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "selectedEle"
                                                                    },
                                                                    "property": {
                                                                        "type": "Literal",
                                                                        "value": 0,
                                                                        "raw": "0"
                                                                    }
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "innerHTML"
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "BinaryExpression",
                                                                "operator": "+",
                                                                "left": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "+",
                                                                    "left": {
                                                                        "type": "Literal",
                                                                        "value": "<pre>",
                                                                        "raw": "\"<pre>\""
                                                                    },
                                                                    "right": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "JSON"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "stringify"
                                                                            }
                                                                        },
                                                                        "arguments": [
                                                                            {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "objs"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Literal",
                                                                                    "value": 0,
                                                                                    "raw": "0"
                                                                                }
                                                                            },
                                                                            {
                                                                                "type": "Literal",
                                                                                "value": null,
                                                                                "raw": "null"
                                                                            },
                                                                            {
                                                                                "type": "Literal",
                                                                                "value": 4,
                                                                                "raw": "4"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "right": {
                                                                    "type": "Literal",
                                                                    "value": "</pre>",
                                                                    "raw": "\"</pre>\""
                                                                }
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "MemberExpression",
                                                                    "computed": true,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "selectedEle"
                                                                    },
                                                                    "property": {
                                                                        "type": "Literal",
                                                                        "value": 1,
                                                                        "raw": "1"
                                                                    }
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "innerHTML"
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "BinaryExpression",
                                                                "operator": "+",
                                                                "left": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "+",
                                                                    "left": {
                                                                        "type": "Literal",
                                                                        "value": "<pre>",
                                                                        "raw": "\"<pre>\""
                                                                    },
                                                                    "right": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "JSON"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "stringify"
                                                                            }
                                                                        },
                                                                        "arguments": [
                                                                            {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "objs"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Literal",
                                                                                    "value": 1,
                                                                                    "raw": "1"
                                                                                }
                                                                            },
                                                                            {
                                                                                "type": "Literal",
                                                                                "value": null,
                                                                                "raw": "null"
                                                                            },
                                                                            {
                                                                                "type": "Literal",
                                                                                "value": 4,
                                                                                "raw": "4"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "right": {
                                                                    "type": "Literal",
                                                                    "value": "</pre>",
                                                                    "raw": "\"</pre>\""
                                                                }
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            "handler": {
                                                "type": "CatchClause",
                                                "param": {
                                                    "type": "Identifier",
                                                    "name": "e"
                                                },
                                                "body": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "Identifier",
                                                                    "name": "c2"
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "Identifier",
                                                                        "name": "e"
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "console"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "log"
                                                                    }
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "Identifier",
                                                                        "name": "e"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            "finalizer": null
                                        }
                                    ]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                    "type": "Identifier",
                                                    "name": "document"
                                                },
                                                "property": {
                                                    "type": "Identifier",
                                                    "name": "getElementById"
                                                }
                                            },
                                            "arguments": [
                                                {
                                                    "type": "Literal",
                                                    "value": "__monitoringStartButton__",
                                                    "raw": "\"__monitoringStartButton__\""
                                                }
                                            ]
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "addEventListener"
                                        }
                                    },
                                    "arguments": [
                                        {
                                            "type": "Literal",
                                            "value": "click",
                                            "raw": "\"click\""
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "startIntervalFn"
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                    "type": "Identifier",
                                                    "name": "document"
                                                },
                                                "property": {
                                                    "type": "Identifier",
                                                    "name": "getElementById"
                                                }
                                            },
                                            "arguments": [
                                                {
                                                    "type": "Literal",
                                                    "value": "__monitoringStopButton__",
                                                    "raw": "\"__monitoringStopButton__\""
                                                }
                                            ]
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "addEventListener"
                                        }
                                    },
                                    "arguments": [
                                        {
                                            "type": "Literal",
                                            "value": "click",
                                            "raw": "\"click\""
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "stopIntervalFn"
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                    "type": "Identifier",
                                                    "name": "document"
                                                },
                                                "property": {
                                                    "type": "Identifier",
                                                    "name": "getElementById"
                                                }
                                            },
                                            "arguments": [
                                                {
                                                    "type": "Literal",
                                                    "value": "__scrollCheckbox__",
                                                    "raw": "\"__scrollCheckbox__\""
                                                }
                                            ]
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "addEventListener"
                                        }
                                    },
                                    "arguments": [
                                        {
                                            "type": "Literal",
                                            "value": "change",
                                            "raw": "\"change\""
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "autoScrollFn"
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                    "type": "Identifier",
                                                    "name": "document"
                                                },
                                                "property": {
                                                    "type": "Identifier",
                                                    "name": "getElementById"
                                                }
                                            },
                                            "arguments": [
                                                {
                                                    "type": "Literal",
                                                    "value": "__wordWrapCheckbox__",
                                                    "raw": "\"__wordWrapCheckbox__\""
                                                }
                                            ]
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "addEventListener"
                                        }
                                    },
                                    "arguments": [
                                        {
                                            "type": "Literal",
                                            "value": "change",
                                            "raw": "\"change\""
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "wordWrapFn"
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                    "type": "Identifier",
                                                    "name": "document"
                                                },
                                                "property": {
                                                    "type": "Identifier",
                                                    "name": "getElementById"
                                                }
                                            },
                                            "arguments": [
                                                {
                                                    "type": "Literal",
                                                    "value": "__intervalTime__",
                                                    "raw": "\"__intervalTime__\""
                                                }
                                            ]
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "addEventListener"
                                        }
                                    },
                                    "arguments": [
                                        {
                                            "type": "Literal",
                                            "value": "change",
                                            "raw": "\"change\""
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "intervalChangeFn"
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                    "type": "Identifier",
                                                    "name": "document"
                                                },
                                                "property": {
                                                    "type": "Identifier",
                                                    "name": "getElementById"
                                                }
                                            },
                                            "arguments": [
                                                {
                                                    "type": "Literal",
                                                    "value": "__cellWidth100__",
                                                    "raw": "\"__cellWidth100__\""
                                                }
                                            ]
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "addEventListener"
                                        }
                                    },
                                    "arguments": [
                                        {
                                            "type": "Literal",
                                            "value": "change",
                                            "raw": "\"change\""
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "cellWidthChangeFn"
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "document"
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "addEventListener"
                                        }
                                    },
                                    "arguments": [
                                        {
                                            "type": "Literal",
                                            "value": "scroll",
                                            "raw": "\"scroll\""
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "scrollEventFn"
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "opener"
                                        },
                                        "property": {
                                            "type": "Identifier",
                                            "name": "__monitoringReloadCount__"
                                        }
                                    },
                                    "right": {
                                        "type": "Literal",
                                        "value": 0,
                                        "raw": "0"
                                    }
                                }
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                        "type": "Identifier",
                                        "name": "startIntervalFn"
                                    },
                                    "arguments": []
                                }
                            }
                        ]
                    },
                    "generator": false,
                    "expression": false,
                    "async": false
                },
                "arguments": []
            }
        }
    ],
    "sourceType": "script"
}